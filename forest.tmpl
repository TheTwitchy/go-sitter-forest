{{define "item"}}"{{.}}": {{if eq . "go"}}Go{{else if eq . "func"}}FunC{{else if eq . "context"}}ConTeXt{{else if eq . "terraform"}}hcl{{else}}{{.}}{{end}}{{end}}
// Package forest makes all the parsers, queries and filetype detection.
//
// This includes every single parser, as long as it is not pending
// (even new/experimental, etc.).
//
// The parsers, queries and filetype detection work in tandem: the exact
// same language returned by filetype detection, can be used to pull in
// the language parser as well as the corresponding queries.
package forest

import (
	"embed"
	enc_json "encoding/json"
	"path/filepath"
	"regexp"
	"slices"
	"strings"
	"sync"
	"unsafe"

	"github.com/alexaandru/go-sitter-forest/make"
	sitter "github.com/alexaandru/go-tree-sitter-bare"
)

// Query fetching preference.
const (
	_ byte = iota

	NvimFirst   // Fetch both, prefer nvim.
	NativeFirst // Fetch both, prefer native.
	NvimOnly    // Fetch only from nvim.
	NativeOnly  // Fetch only from sitter repo.

)

//go:embed grammars.json
var info []byte

var languageFuncs = map[string]func() unsafe.Pointer{ {{- range . -}}
        {{template "item" .}}.GetLanguage,
{{end -}}}

var queryFuncs = map[string]func(string, ...byte) []byte{ {{- range . -}}
        {{template "item" .}}.GetQuery,
{{ end -}}}

var (
	grammars grammar.Grammars
	// Making the colon optional is risky: most places use it AND
	// there are many places that do NOT use it and mean something else...
	rxInherits    = regexp.MustCompile(`^\s*;\s*inherits:?\s*(.*?)\n`)
	nvimRemaining = filepath.Join("internal", "queries", "nvim_remaining")
	cache         = sync.Map{}
)

//go:embed internal/queries/nvim_remaining/*/*.scm
var remainingQueries embed.FS

// GetLanguage returns the corresponding TS language function for given lang,
// and caches it so that language copies are not created unnecessarily.
func GetLanguage(lang string) (l *sitter.Language) {
	if x, ok := cache.Load(lang); ok {
		return x.(*sitter.Language)
	}

	l = sitter.NewLanguage(languageFuncs[lang]())

	cache.Store(lang, l)

	return
}

// GetQuery returns (if it exists) the `kind`.scm query for `lang` language,
// using the DefaultPreference, resolving "inherits" directives, recursively.
// You should omit the ".scm" extension.
func GetQuery(lang, kind string, opts ...byte) (out []byte) {
	kind = strings.TrimSuffix(kind, ".scm") + ".scm"

	q := queryFuncs[lang]
	if q == nil {
		q = getQueryFromRemainingNvim(lang, opts...)
	}

	if q != nil {
		out = q(kind, opts...)
	}

	if len(out) == 0 {
		return
	}

	// FIXME: Temporary, until lua-match is implemented upstream.
	out = util.QueryLuaMatch2Match(out)

	mx := rxInherits.FindSubmatch(out)
	if mx == nil {
		return
	}

	inherited := strings.Split(string(mx[1]), ",")
	for _, in := range inherited {
		out2 := GetQuery(in, kind, opts...)
		if len(out2) == 0 {
			continue
		}

		out = slices.Concat(out2, []byte{10, 10}, out)
	}

	return
}

func getQueryFromRemainingNvim(lang string, opts ...byte) func(string, ...byte) []byte {
	if len(opts) > 0 && opts[0] == NativeOnly {
		return nil
	}

	return func(kind string, _ ...byte) (out []byte) {
		out, err := remainingQueries.ReadFile(filepath.Join(nvimRemaining, lang, kind))
		if err != nil || len(out) == 0 {
			// TODO: log somewhere/somehow.
			return nil
		}

		return
	}
}

// SupportedLanguages returns the list of supported languages' names.
func SupportedLanguages() []string {
	return grammars.Supported()
}

// SupportedLanguage checks if the given language is supported.
func SupportedLanguage(lang string) bool {
	return slices.Index(SupportedLanguages(), lang) >= 0
}

// Info returns the language parser (grammar) related information.
// TODO: Hmm, now that we also have queries, should it include info about them too?
// Or offer a similar function?
func Info(lang string) (gr *grammar.Grammar) {
	gr, _ = grammars.Find(lang) //nolint:errcheck // the returned grammar is a pointer, will only be set if there is no error.
	return
}

func init() {
	if err := enc_json.Unmarshal(info, &grammars); err != nil {
		panic(err)
	}

	if err := ft.load(ftDetect); err != nil {
		panic(err)
	}
}
