package forest

import (
	"net/http"
	"os"
	"path/filepath"
)

// NOTE: use the exact same names as the query folder name/TS lang name.
// Only specify here langs where the name differs from extension (i.e. .js vs javascript)
// OR where they have multiple extensions mapped to the same lang (.h and .c to c, etc.)
// and not the ones where they are identical (.java java or .go go, etc.).
// TODO: Handle languages sharing file extension (.fs=Forth+F#, .v=Verilog+V, etc.).
var filetypes = map[string]string{
	".4th":               "forth",
	".C":                 "cpp",
	".F03":               "fortran",
	".F08":               "fortran",
	".F77":               "fortran",
	".F90":               "fortran",
	".F95":               "fortran",
	".FOR":               "fortran",
	".FPP":               "fortran",
	".FTN":               "fortran",
	".H":                 "cpp",
	".INI":               "ini",
	".R":                 "r",
	".Rnw":               "rnoweb",
	".Snw":               "rnoweb",
	".abap":              "abap",
	".ada":               "ada",
	".adb":               "ada",
	".ads":               "ada",
	".agda":              "agda",
	".aiken":             "aiken",
	".amber":             "amber",
	".angular":           "angular",
	".apex":              "apex",
	".asm":               "asm",
	".astro":             "astro",
	".august":            "august",
	".authzed":           "authzed",
	".awk":               "awk",
	".bass":              "bass",
	".bb":                "bitbake",
	".bbappend":          "bitbake",
	".bbclass":           "bitbake",
	".beancount":         "beancount",
	".bend":              "bend",
	".bib":               "bibtex",
	".bicep":             "bicep",
	".bicepparam":        "bicep",
	".blade":             "blade",
	".blp":               "blueprint",
	".bp":                "bp",
	".brs":               "brightscript",
	".bsv":               "bluespec",
	".builder":           "ruby",
	".c":                 "c",
	".c++":               "cpp",
	".ca65":              "ca65",
	".cairo":             "cairo",
	".calc":              "calc",
	".capnp":             "capnp",
	".cbl":               "cobol",
	".cc":                "cpp",
	".ccp":               "cobol",
	".cds":               "cds",
	".cedar":             "cedar",
	".cel":               "cel",
	".cg":                "cg",
	".chatito":           "chatito",
	".circom":            "circom",
	".cl":                "commonlisp",
	".clarity":           "clarity",
	".cleancopy":         "cleancopy",
	".clingo":            "clingo",
	".clj":               "clojure",
	".cljc":              "clojure",
	".cljs":              "clojure",
	".cljx":              "clojure",
	".cmake":             "cmake",
	".cob":               "cobol",
	".cognate":           "cognate",
	".comment":           "comment",
	".cook":              "cooklang",
	".corn":              "corn",
	".cpon":              "cpon",
	".cpp":               "cpp",
	".cr":                "crystal",
	".cs":                "c_sharp",
	".css":               "css",
	".csv":               "csv",
	".cu":                "cuda",
	".cue":               "cue",
	".cuh":               "cuda",
	".d":                 "d",
	".dale":              "dale",
	".dart":              "dart",
	".dhall":             "dhall",
	".diff":              "diff",
	".disassembly":       "disassembly",
	".djot":              "djot",
	".dot":               "dot",
	".dotenv":            "dotenv",
	".drt":               "dart",
	".dtd":               "dtd",
	".dts":               "devicetree",
	".earthfile":         "earthfile",
	".ebnf":              "ebnf",
	".editorconfig":      "editorconfig",
	".eds":               "eds",
	".eex":               "eex",
	".el":                "commonlisp",
	".elm":               "elm",
	".elsa":              "elsa",
	".elv":               "elvish",
	".embedded_template": "embedded_template",
	".env":               "dotenv",
	".erl":               "erlang",
	".ex":                "elixir",
	".exs":               "elixir",
	".f":                 "fortran",
	".f03":               "fortran",
	".f08":               "fortran",
	".f77":               "fortran",
	".f90":               "fortran",
	".f95":               "fortran",
	".facility":          "facility",
	".familymarkup":      "familymarkup",
	".fastbuild":         "fastbuild",
	".faust":             "faust",
	".fidl":              "fidl",
	".filter":            "poe_filter",
	".fin":               "fin",
	".fir":               "firrtl",
	".fish":              "fish",
	".flamingo":          "flamingo",
	".fluentbit":         "fluentbit",
	".fnl":               "fennel",
	".foam":              "foam",
	".for":               "fortran",
	".fortran":           "fortran",
	".fpp":               "fortran",
	".fsh":               "fsh",
	".fth":               "forth",
	".ftn":               "fortran",
	".func":              "func",
	".fusion":            "fusion",
	".gawk":              "awk",
	".gd":                "gdscript",
	".gdshader":          "gdshader",
	".gemfilelock":       "gemfilelock",
	".gemspec":           "ruby",
	".gherkin":           "gherkin",
	".git_config":        "git_config",
	".git_rebase":        "git_rebase",
	".gitattributes":     "gitattributes",
	".gitcommit":         "gitcommit",
	".gitignore":         "gitignore",
	".gjs":               "glimmer",
	".gleam":             "gleam",
	".glint":             "glint",
	".glsl":              "glsl",
	".gn":                "gn",
	".gni":               "gn",
	".gnuplot":           "gnuplot",
	".go":                "go",
	".gobra":             "gobra",
	".goctl":             "goctl",
	".godot_resource":    "godot_resource",
	".gpg":               "gpg",
	".gpi":               "gnuplot",
	".gpr":               "ada",
	".gql":               "graphql",
	".gradle":            "groovy",
	".graphql":           "graphql",
	".graphqls":          "graphql",
	".gren":              "gren",
	".groovy":            "groovy",
	".gstlaunch":         "gstlaunch",
	".gts":               "glimmer",
	".h":                 "c",
	".ha":                "hare",
	".hack":              "hack",
	".hackpartial":       "hack",
	".haml":              "haml",
	".hcl":               "hcl",
	".heex":              "heex",
	".helm":              "helm",
	".hh":                "c",
	".hjson":             "hjson",
	".hlsl":              "hlsl",
	".hlsplaylist":       "hlsplaylist",
	".hocon":             "hocon",
	".hoon":              "hoon",
	".hpp":               "cpp",
	".hrl":               "erlang",
	".hs":                "haskell",
	".hs-boot":           "haskell",
	".hsc":               "haskell",
	".hsig":              "haskell",
	".htm":               "html",
	".html":              "html",
	".htmlaskama":        "htmlaskama",
	".htmldjango":        "htmldjango",
	".http":              "http",
	".http2":             "http2",
	".hungarian":         "hungarian",
	".hurl":              "hurl",
	".hyprlang":          "hyprlang",
	".idl":               "idl",
	".idris":             "idris",
	".ignis":             "ignis",
	".ini":               "ini",
	".ink":               "ink",
	".inko":              "inko",
	".ino":               "arduino",
	".ipd":               "starlark",
	".ispc":              "ispc",
	".janet":             "janet_simple",
	".jav":               "java",
	".java":              "java",
	".jl":                "julia",
	".journal":           "ledger",
	".jq":                "jq",
	".js":                "javascript",
	".jsdoc":             "jsdoc",
	".json":              "json",
	".json5":             "json5",
	".jsonc":             "jsonc",
	".jsonnet":           "jsonnet",
	".just":              "just",
	".kcl":               "kcl",
	".kconfig":           "kconfig",
	".kdl":               "kdl",
	".koan":              "koan",
	".koto":              "koto",
	".kt":                "kotlin",
	".ktm":               "kotlin",
	".kts":               "kotlin",
	".kusto":             "kusto",
	".lalrpop":           "lalrpop",
	".ldg":               "ldg",
	//".ldg":"ledger",
	".ledger":            "ledger",
	".leo":               "leo",
	".lexc":              "lexc",
	".lexd":              "lexd",
	".libsonnet":         "jsonnet",
	".linkerscript":      "linkerscript",
	".liq":               "liquidsoap",
	".liquid":            "liquid",
	".lisp":              "commonlisp",
	".llvm":              "llvm",
	".lox":               "lox",
	".lua":               "lua",
	".luadoc":            "luadoc",
	".luap":              "luap",
	".luau":              "luau",
	".m":                 "objc",
	".m68k":              "m68k",
	".mak":               "make",
	".make":              "make",
	".makefile":          "make",
	".markdown_inline":   "markdown_inline",
	".matlab":            "matlab",
	".mcfuncx":           "mcfuncx",
	".md":                "markdown",
	".menhir":            "menhir",
	".mermaid":           "mermaid",
	".meson":             "meson",
	".mk":                "make",
	".mkii":              "context",
	".mkiv":              "context",
	".mklx":              "context",
	".mkvi":              "context",
	".mkxl":              "context",
	".ml":                "ocaml",
	".mli":               "ocaml",
	".mlip":              "ocaml",
	".mlir":              "mlir",
	".mll":               "ocaml",
	".mlp":               "ocaml",
	".mlt":               "ocaml",
	".mly":               "ocaml",
	".mmd":               "mermaid",
	".mmdc":              "mermaid",
	".motoko":            "motoko",
	".move":              "move",
	".move_on_aptos":     "move_on_aptos",
	".muttrc":            "muttrc",
	".nasm":              "nasm",
	".nesfab":            "nesfab",
	".nginx":             "nginx",
	".nickel":            "nickel",
	".nim":               "nim",
	".nim_format_string": "nim_format_string",
	".nimble":            "nim",
	".nims":              "nim",
	".ninja":             "ninja",
	".nix":               "nix",
	".norg":              "norg",
	".note":              "note",
	".nqc":               "nqc",
	".nut":               "squirrel",
	".objdump":           "objdump",
	".ocaml_interface":   "ocaml_interface",
	".ocamllex":          "ocamllex",
	".odin":              "odin",
	".org":               "org",
	".org_archive":       "org",
	".ott":               "ott",
	".pas":               "pascal",
	".passwd":            "passwd",
	".pdb":               "prolog",
	".pde":               "arduino",
	".pem":               "pem",
	".persistentmodels":  "haskell_persistent",
	".php":               "php",
	".php_only":          "php_only",
	".phpdoc":            "phpdoc",
	".pio":               "pioasm",
	".pip":               "requirements",
	".pl":                "perl",
	".po":                "po",
	".pod":               "pod",
	".pony":              "pony",
	".pot":               "po",
	".pp":                "pascal",
	".printf":            "printf",
	".prisma":            "prisma",
	".problog":           "problog",
	".promql":            "promql",
	".properties":        "properties",
	".proto":             "proto",
	".prql":              "prql",
	".psv":               "psv",
	".pug":               "pug",
	".puppet":            "puppet",
	".purs":              "purescript",
	".py":                "python",
	".pymanifest":        "pymanifest",
	".pyrope":            "pyrope",
	".ql":                "ql",
	".qll":               "ql",
	".qmldir":            "qmldir",
	".qmljs":             "qmljs",
	".quark":             "supercollider",
	".rake":              "ruby",
	".ralph":             "ralph",
	".rasi":              "rasi",
	".rb":                "ruby",
	".rbs":               "rbs",
	".re2c":              "re2c",
	".readline":          "readline",
	".regex":             "regex",
	".rego":              "rego",
	".resource":          "robot",
	".risor":             "risor",
	".rkt":               "racket",
	".rktd":              "racket",
	".rktl":              "racket",
	".rnw":               "rnoweb",
	".robot":             "robot",
	".robots":            "robots",
	".roc":               "roc",
	".rockspec":          "lua",
	".ron":               "ron",
	".rq":                "sparql",
	".rs":                "rust",
	".rtx":               "rtx",
	".scala":             "scala",
	".scd":               "supercollider",
	".scfg":              "scfg",
	".scheme":            "scheme",
	".scm":               "query",
	//".scm":"scheme",
	".scss":              "scss",
	".sdml":              "sdml",
	".sface":             "surface",
	".sh":                "bash",
	".shader":            "gdshader",
	".sincere":           "sincere",
	".slang":             "slang",
	".sld":               "scheme",
	".slim":              "slim",
	".slint":             "slint",
	".smali":             "smali",
	".smithy":            "smithy",
	".smk":               "snakemake",
	".sml":               "sml",
	".snw":               "rnoweb",
	".sol":               "solidity",
	".soql":              "soql",
	".sosl":              "sosl",
	".sourcepawn":        "sourcepawn",
	".sparql":            "sparql",
	".sql":               "sql",
	".sql_bigquery":      "sql_bigquery",
	".sqlite":            "sqlite",
	".ss":                "scheme",
	".ssh_client_config": "ssh_client_config",
	".ssh_config":        "ssh_config",
	".star":              "starlark",
	".starlark":          "starlark",
	".stp":               "systemtap",
	".strace":            "strace",
	".styled":            "styled",
	".surface":           "surface",
	".surrealql":         "surrealql",
	".sus":               "sus",
	".svelte":            "svelte",
	".swift":             "swift",
	".sxhkdrc":           "sxhkdrc",
	".syphon":            "syphon",
	".systemverilog":     "systemverilog",
	".t32":               "t32",
	".tact":              "tact",
	".tcl":               "tcl",
	".td":                "tablegen",
	".teal":              "teal",
	".templ":             "templ",
	".tex":               "latex",
	".textproto":         "textproto",
	".tf":                "terraform",
	".thrift":            "thrift",
	".tiger":             "tiger",
	".tlaplus":           "tlaplus",
	".tmpl":              "gotmpl",
	".tmux":              "tmux",
	".tnsl":              "tnsl",
	".todolang":          "todolang",
	".todotxt":           "todotxt",
	".toml":              "toml",
	".tort":              "tort",
	".ts":                "typescript",
	".tsv":               "tsv",
	".tsx":               "tsx",
	".ttl":               "turtle",
	".twig":              "twig",
	".twolc":             "twolc",
	".typespec":          "typespec",
	".typoscript":        "typoscript",
	".typst":             "typst",
	".udev":              "udev",
	".ungrammar":         "ungrammar",
	".unison":            "unison",
	".usd":               "usd",
	".uxntal":            "uxntal",
	".v":                 "verilog",
	".vala":              "vala",
	".vhs":               "vhs",
	".vim":               "vim",
	".vimdoc":            "vimdoc",
	".virdant":           "virdant",
	".virgil":            "virgil",
	".vlang":             "v",
	".vsh":               "v",
	".vto":               "vento",
	".vue":               "vue",
	".vv":                "v",
	".walnut":            "walnut",
	".wgsl":              "wgsl",
	".wgsl_bevy":         "wgsl_bevy",
	".wing":              "wing",
	".wit":               "wit",
	".woml":              "woml",
	".xcompose":          "xcompose",
	".xfst":              "xfst",
	".xml":               "xml",
	".yaml":              "yaml",
	".yang":              "yang",
	".yml":               "yaml",
	".yuck":              "yuck",
	".zathurarc":         "zathurarc",
	".zig":               "zig",
	".zon":               "zig",
	"Dockerfile":         "dockerfile",
	"Doxyfile":           "doxygen",
	"Makefile":           "make",
	"Rakefile":           "ruby",
	"dockerfile":         "dockerfile",
	"go.mod":             "gomod",
	"go.sum":             "gosum",
	"go.work":            "gowork",
}

// DetectLang detects the language name based on given file path.
// The names are the same as the ones used by nvim_treesiter queries.
// See https://neovim.io/doc/user/filetype.html and
// https://github.com/neovim/neovim/blob/master/runtime/lua/vim/filetype.lua
// Detect by ext is only one thing, we should also detect by path, i.e.
// .ssh/config -> ssh_config
// queries/*/*.scm -> query, otherwise scheme,
// etc.
// As well as detect by first line in file, using the vi stuff (vim:set ft=...:).
func DetectLanguage(fpath string) string {
	if x := langName(filepath.Base(fpath)); x != "" {
		return x
	}

	if x := langName(filepath.Ext(fpath)); x != "" {
		return x
	}

	f, err := os.Open(fpath)
	if err != nil {
		return ""
	}

	b := make([]byte, 512)

	n, err := f.Read(b)
	if err != nil {
		return ""
	}

	b = b[:n]

	switch x := http.DetectContentType(b); x {
	case "application/octet-stream":
		return "binary"
	default:
		return "unknown"
	}
}

func langName(fileName string) string {
	if v, ok := filetypes[filepath.Base(fileName)]; ok {
		return v
	}

	return filetypes[filepath.Ext(fileName)]
}
