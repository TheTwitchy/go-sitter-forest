//go:build !plugin

package integerbasic_test

import (
	"context"
	"testing"

	"github.com/alexaandru/go-sitter-forest/integerbasic"
	sitter "github.com/alexaandru/go-tree-sitter-bare"
)

const (
	code = `5 TEXT: CALL -936: VTAB 4: TAB 10: PRINT "*** BREAKOUT GAME ***": PRINT
7 PRINT "  OBJECT IS TO DESTROY ALL BRICKS WITH 5 BALLS": FOR N=1 TO 7000: NEXT N
10 DIM A$(20),B$(20): GR: PRINT: INPUT "HI, WHAT'S YOUR NAME? ",A$:A=1:B=13:C=9:D=6:E=15: PRINT "STANDARD COLORS,"; A$;
20 INPUT "? ",B$: IF B$#"N" AND B$#"NO" THEN 30: FOR I=0 TO 39: COLOR=I/2*(I<32): VLIN 0,39 AT I
25 NEXT I: POKE 34,20: PRINT: PRINT: PRINT: FOR I=0 TO 15: VTAB 21+I MOD 2: TAB I+I+1: PRINT I;: NEXT I: POKE 34,22: VTAB 24: PRINT: PRINT "BACKGROUND";
27 GOSUB 100: A=E: PRINT "EVEN BRICK";: GOSUB 100: B=E: PRINT "ODD BRICK";: GOSUB 100: C=E: PRINT "PADDLE";: GOSUB 100: D=E : PRINT "BALL";: GOSUB 100
30 POKE34,20:COLOR=A:FORI=0TO39:VLIN0,39ATI:NEXTI:FOR I=20TO34STEP2:TAB I+1:PRINT I/2-9;:COLOR=B:VLIN 0,39 AT I:COLOR=C:FOR J=I MOD 4 TO 39 STEP4
35 VLIN J,J+1 AT I: NEXT J,I: TAB 5: PRINT "SCORE = 0": PRINT: PRINT: POKE 34,21: S=0: P=S: L=S: X=19: Y=19: X=19
40 COLOR=A:PLOTX,Y/3:X=19:Y=RND(120):V=-1:W=RND(5)-2:L=L+1:IFL>5THEN140:TAB6:PRINT"BALL #";L:PRINT:FORI=1TO100:GOSUB200:NEXTI:M=1:N=0
50 J=Y+W: IF J>=0 AND J<120 THEN 60: W=-W: J=Y: FOR I=1 TO 6: K=PEEK(-16336): NEXT I
55 IF PEEK(-16287)>127 THEN SW=1-SW
60 I=X+V: IF I<0 THEN 400: GOSUB 200: COLOR=A: K=J/3: IF I>39 THEN 70: IF SCRN(I,K)=A THEN 90: IF I THEN 120: N=N+1: V=(N>9)+1: W=(K-P)*2-5:M=1
65 Z = PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336): GOTO 90
70 FOR I=1 TO 6: M=PEEK(-16336): NEXT I: I=X: M=0
80 V=-V
90 PLOT X,Y/3: COLOR=E: PLOT I,K: X=I: Y=J: GOTO 50
99 PRINT "INVALID.  REENTER";
100 INPUT " COLOR (0 TO 15)",E: IF E<0 OR E>15 THEN 99: RETURN
120 IF M THEN V=ABS(V): VLIN K/2*2,K/2*2+1 AT I: S=S+I/2-9: VTAB 21: TAB 13: PRINT S
123 Q = PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)-PEEK(-16336)
124 IF S<720 THEN 80
130 PRINT "CONGRATULATIONS, YOU WIN.": GOTO 150
140 PRINT "YOUR SCORE OF ";S;" IS ";: GOTO 141+S/100
141 PRINT "TERRIBLE!": GOTO 150
142 PRINT "LOUSY.": GOTO 150
143 PRINT "POOR.": GOTO 150
144 PRINT "FAIR.": GOTO 150
145 PRINT "GOOD.": GOTO 150
146 PRINT "VERY GOOD.": GOTO 150
147 PRINT "EXCELLENT.": GOTO 150
148 PRINT "NEARLY PERFECT."
150 PRINT "SAME COLORS";: GOTO 20
200 IF SW THEN 220: Q=(PDL(0)-5)/6: IF Q<0 THEN Q=0
205 IF Q>=34 THEN Q=34: COLOR=D: VLIN Q,Q+5 AT 0: COLOR=A: IF P>Q THEN 210: IF Q THEN VLIN 0,Q-1 AT 0: P=Q: RETURN
210 IF P=Q THEN RETURN: IF Q#34 THEN VLIN Q+6,39 AT 0: P=Q: RETURN
220 Q=(Y-5)/3+RND(3)*SGN(W)*(X<10 AND V<0): IF Q<0 THEN Q=0: GOTO 205
400 FOR I=1 TO 80: Q=PEEK(-16336): NEXT I: GOTO 40
`
	expected = "(source_file (line (linenum) (statement (statement_text)) (sep_statement) (statement (statement_call) (unary_aexpr (op_unary_minus) (integer))) (sep_statement) (statement (statement_vtab) (integer)) (sep_statement) (statement (statement_tab) (integer)) (sep_statement) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_print_null))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer)) (sep_statement) (statement (statement_next) (int_name))) (line (linenum) (statement (statement_dim_str) (str_name (dollar)) (open_dim_str) (integer) (close) (sep_dim_str) (str_name (dollar)) (open_dim_str) (integer) (close)) (sep_statement) (statement (statement_gr)) (sep_statement) (statement (statement_print_null)) (sep_statement) (statement (statement_input_prompt) (string (quote) (unquote)) (sep_input_str) (str_name (dollar))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_str) (str_name (dollar)) (sep_print_null))) (line (linenum) (statement (statement_input_prompt) (string (quote) (unquote)) (sep_input_str) (str_name (dollar))) (sep_statement) (statement (statement_if) (binary_aexpr (binary_aexpr (str_name (dollar)) (op_sneq) (string (quote) (unquote))) (op_and) (binary_aexpr (str_name (dollar)) (op_sneq) (string (quote) (unquote)))) (statement_then_line) (integer)) (sep_statement) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer)) (sep_statement) (statement (statement_coloreq) (binary_aexpr (binary_aexpr (int_name) (op_div) (integer)) (op_times) (open_aexpr) (binary_aexpr (int_name) (op_less) (integer)) (close))) (sep_statement) (statement (statement_vlin) (integer) (sep_vlin) (integer) (op_vlin_at) (int_name))) (line (linenum) (statement (statement_next) (int_name)) (sep_statement) (statement (statement_poke) (integer) (sep_poke) (integer)) (sep_statement) (statement (statement_print_null)) (sep_statement) (statement (statement_print_null)) (sep_statement) (statement (statement_print_null)) (sep_statement) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer)) (sep_statement) (statement (statement_vtab) (binary_aexpr (integer) (op_plus) (binary_aexpr (int_name) (op_mod) (integer)))) (sep_statement) (statement (statement_tab) (binary_aexpr (binary_aexpr (int_name) (op_plus) (int_name)) (op_plus) (integer))) (sep_statement) (statement (statement_print_int) (int_name) (sep_print_null)) (sep_statement) (statement (statement_next) (int_name)) (sep_statement) (statement (statement_poke) (integer) (sep_poke) (integer)) (sep_statement) (statement (statement_vtab) (integer)) (sep_statement) (statement (statement_print_null)) (sep_statement) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_null))) (line (linenum) (statement (statement_gosub) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_null)) (sep_statement) (statement (statement_gosub) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_null)) (sep_statement) (statement (statement_gosub) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_null)) (sep_statement) (statement (statement_gosub) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_null)) (sep_statement) (statement (statement_gosub) (integer))) (line (linenum) (statement (statement_poke) (integer) (sep_poke) (integer)) (sep_statement) (statement (statement_coloreq) (int_name)) (sep_statement) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer)) (sep_statement) (statement (statement_vlin) (integer) (sep_vlin) (integer) (op_vlin_at) (int_name)) (sep_statement) (statement (statement_next) (int_name)) (sep_statement) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer) (op_step) (integer)) (sep_statement) (statement (statement_tab) (binary_aexpr (int_name) (op_plus) (integer))) (sep_statement) (statement (statement_print_int) (binary_aexpr (binary_aexpr (int_name) (op_div) (integer)) (op_minus) (integer)) (sep_print_null)) (sep_statement) (statement (statement_coloreq) (int_name)) (sep_statement) (statement (statement_vlin) (integer) (sep_vlin) (integer) (op_vlin_at) (int_name)) (sep_statement) (statement (statement_coloreq) (int_name)) (sep_statement) (statement (statement_for) (int_name) (op_eq_for) (binary_aexpr (int_name) (op_mod) (integer)) (op_to) (integer) (op_step) (integer))) (line (linenum) (statement (statement_vlin) (int_name) (sep_vlin) (binary_aexpr (int_name) (op_plus) (integer)) (op_vlin_at) (int_name)) (sep_statement) (statement (statement_next) (int_name) (sep_next) (int_name)) (sep_statement) (statement (statement_tab) (integer)) (sep_statement) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_print_null)) (sep_statement) (statement (statement_print_null)) (sep_statement) (statement (statement_poke) (integer) (sep_poke) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer)))) (line (linenum) (statement (statement_coloreq) (int_name)) (sep_statement) (statement (statement_plot) (int_name) (sep_plot) (binary_aexpr (int_name) (op_div) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_rnd) (open_fcall) (integer) (close)))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (unary_aexpr (op_unary_minus) (integer)))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (fcall (fcall_rnd) (open_fcall) (integer) (close)) (op_minus) (integer)))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_plus) (integer)))) (sep_statement) (statement (statement_if) (binary_aexpr (int_name) (op_gtr) (integer)) (statement_then_line) (integer)) (sep_statement) (statement (statement_tab) (integer)) (sep_statement) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_int) (int_name)) (sep_statement) (statement (statement_print_null)) (sep_statement) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer)) (sep_statement) (statement (statement_gosub) (integer)) (sep_statement) (statement (statement_next) (int_name)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer)))) (line (linenum) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_plus) (int_name)))) (sep_statement) (statement (statement_if) (binary_aexpr (binary_aexpr (binary_aexpr (int_name) (op_gtreq) (integer)) (op_and) (int_name)) (op_less) (integer)) (statement_then_line) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (unary_aexpr (op_unary_minus) (int_name)))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close)))) (sep_statement) (statement (statement_next) (int_name))) (line (linenum) (statement (statement_if) (binary_aexpr (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close)) (op_gtr) (integer)) (statement_then) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (integer) (op_minus) (int_name)))))) (line (linenum) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_plus) (int_name)))) (sep_statement) (statement (statement_if) (binary_aexpr (int_name) (op_less) (integer)) (statement_then_line) (integer)) (sep_statement) (statement (statement_gosub) (integer)) (sep_statement) (statement (statement_coloreq) (int_name)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_div) (integer)))) (sep_statement) (statement (statement_if) (binary_aexpr (int_name) (op_gtr) (integer)) (statement_then_line) (integer)) (sep_statement) (statement (statement_if) (binary_aexpr (fcall (fcall_scrnp) (int_name) (sep_scrn) (int_name) (close)) (op_aeq) (int_name)) (statement_then_line) (integer)) (sep_statement) (statement (statement_if) (int_name) (statement_then_line) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_plus) (integer)))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (open_aexpr) (binary_aexpr (int_name) (op_gtr) (integer)) (close) (op_plus) (integer)))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (binary_aexpr (open_aexpr) (binary_aexpr (int_name) (op_minus) (int_name)) (close) (op_times) (integer)) (op_minus) (integer)))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer)))) (line (linenum) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close)) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close)))) (sep_statement) (statement (statement_next) (int_name)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (integer)))) (line (linenum) (statement (assignment_int (int_name) (op_eq_assign_int) (unary_aexpr (op_unary_minus) (int_name))))) (line (linenum) (statement (statement_plot) (int_name) (sep_plot) (binary_aexpr (int_name) (op_div) (integer))) (sep_statement) (statement (statement_coloreq) (int_name)) (sep_statement) (statement (statement_plot) (int_name) (sep_plot) (int_name)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_null))) (line (linenum) (statement (statement_input_prompt) (string (quote) (unquote)) (sep_input_int) (int_name)) (sep_statement) (statement (statement_if) (binary_aexpr (binary_aexpr (binary_aexpr (int_name) (op_less) (integer)) (op_or) (int_name)) (op_gtr) (integer)) (statement_then_line) (integer)) (sep_statement) (statement (statement_return))) (line (linenum) (statement (statement_if) (int_name) (statement_then) (statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_abs) (open_fcall) (int_name) (close))))) (sep_statement) (statement (statement_vlin) (binary_aexpr (binary_aexpr (int_name) (op_div) (integer)) (op_times) (integer)) (sep_vlin) (binary_aexpr (binary_aexpr (binary_aexpr (int_name) (op_div) (integer)) (op_times) (integer)) (op_plus) (integer)) (op_vlin_at) (int_name)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (binary_aexpr (int_name) (op_plus) (binary_aexpr (int_name) (op_div) (integer))) (op_minus) (integer)))) (sep_statement) (statement (statement_vtab) (integer)) (sep_statement) (statement (statement_tab) (integer)) (sep_statement) (statement (statement_print_int) (int_name))) (line (linenum) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (binary_aexpr (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close)) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close))) (op_minus) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close)))))) (line (linenum) (statement (statement_if) (binary_aexpr (int_name) (op_less) (integer)) (statement_then_line) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_int) (int_name) (sep_print_str) (string (quote) (unquote)) (sep_print_null)) (sep_statement) (statement (statement_goto) (binary_aexpr (integer) (op_plus) (binary_aexpr (int_name) (op_div) (integer))))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote)))) (line (linenum) (statement (statement_print_str) (string (quote) (unquote)) (sep_print_null)) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_if) (int_name) (statement_then_line) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (open_aexpr) (binary_aexpr (fcall (fcall_pdl) (open_fcall) (integer) (close)) (op_minus) (integer)) (close) (op_div) (integer)))) (sep_statement) (statement (statement_if) (binary_aexpr (int_name) (op_less) (integer)) (statement_then) (statement (assignment_int (int_name) (op_eq_assign_int) (integer))))) (line (linenum) (statement (statement_if) (binary_aexpr (int_name) (op_gtreq) (integer)) (statement_then) (statement (assignment_int (int_name) (op_eq_assign_int) (integer)))) (sep_statement) (statement (statement_coloreq) (int_name)) (sep_statement) (statement (statement_vlin) (int_name) (sep_vlin) (binary_aexpr (int_name) (op_plus) (integer)) (op_vlin_at) (integer)) (sep_statement) (statement (statement_coloreq) (int_name)) (sep_statement) (statement (statement_if) (binary_aexpr (int_name) (op_gtr) (int_name)) (statement_then_line) (integer)) (sep_statement) (statement (statement_if) (int_name) (statement_then) (statement (statement_vlin) (integer) (sep_vlin) (binary_aexpr (int_name) (op_minus) (integer)) (op_vlin_at) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (statement_return))) (line (linenum) (statement (statement_if) (binary_aexpr (int_name) (op_aeq) (int_name)) (statement_then) (statement (statement_return))) (sep_statement) (statement (statement_if) (binary_aexpr (int_name) (op_aneq) (integer)) (statement_then) (statement (statement_vlin) (binary_aexpr (int_name) (op_plus) (integer)) (sep_vlin) (integer) (op_vlin_at) (integer))) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (int_name))) (sep_statement) (statement (statement_return))) (line (linenum) (statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (binary_aexpr (open_aexpr) (binary_aexpr (int_name) (op_minus) (integer)) (close) (op_div) (integer)) (op_plus) (binary_aexpr (binary_aexpr (fcall (fcall_rnd) (open_fcall) (integer) (close)) (op_times) (fcall (fcall_sgn) (open_fcall) (int_name) (close))) (op_times) (open_aexpr) (binary_aexpr (binary_aexpr (binary_aexpr (int_name) (op_less) (integer)) (op_and) (int_name)) (op_less) (integer)) (close))))) (sep_statement) (statement (statement_if) (binary_aexpr (int_name) (op_less) (integer)) (statement_then) (statement (assignment_int (int_name) (op_eq_assign_int) (integer)))) (sep_statement) (statement (statement_goto) (integer))) (line (linenum) (statement (statement_for) (int_name) (op_eq_for) (integer) (op_to) (integer)) (sep_statement) (statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_peek) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close)))) (sep_statement) (statement (statement_next) (int_name)) (sep_statement) (statement (statement_goto) (integer))))"
)

func TestGrammar(t *testing.T) {
	n, err := sitter.Parse(context.Background(), []byte(code), integerbasic.GetLanguage())
	if err != nil {
		t.Fatalf("Expected no error got %v", err)
	}

	if act := n.String(); act != expected {
		t.Fatalf("Expected %q got %q", expected, act)
	}
}
