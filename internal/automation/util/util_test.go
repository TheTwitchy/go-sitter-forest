package util

import (
	"testing"
)

func TestQueryLuaMatch2Match(t *testing.T) {
	testCase := `bitbake/highlights.scm: (#lua-match? @field "^[%l_].*$"))
bitbake/highlights.scm: (#lua-match? @constructor "^%u"))
bitbake/highlights.scm: (#lua-match? @constructor "^%u"))
bitbake/nvimts__highlights.scm:  (#lua-match? @variable.member "^[%l_].*$"))
bitbake/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
bitbake/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
cairo/highlights.scm: (#lua-match? @constant "^[A-Z][A-Z%d_]*$"))
cairo/highlights.scm:  (#lua-match? @constructor "^%u"))
cairo/nvimts__highlights.scm:  (#lua-match? @constant "^[A-Z][A-Z%d_]*$"))
cairo/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
clojure/nvimts__highlights.scm:  (#lua-match? @variable.builtin "^%%%d*$"))
clojure/nvimts__highlights.scm:  (#lua-match? @constructor "^-%>[^>].*"))
clojure/nvimts__highlights.scm:  (#lua-match? @_name "^[%u][^/%s]*$")) @type
clojure/nvimts__highlights.scm:  (#lua-match? @_name "^%.[^-]"))
clojure/nvimts__highlights.scm:  (#lua-match? @variable.member "^%.%-%S*"))
clojure/nvimts__highlights.scm:  (#lua-match? @_namespace "^[%u]%S*$")) @variable.member
clojure/nvimts__highlights.scm:    (#lua-match? @_namespace "^%u")) @function.method)
cmake/nvimts__highlights.scm:  (#lua-match? @constant "^[%u@][%u%d_]+$"))
cpp/nvimts__highlights.scm:  (#lua-match? @type "^[%u]"))
cpp/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
cpp/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
cpp/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
cpp/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
cpp/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
dart/nvimts__highlights.scm:  (#lua-match? @function "^_?[%l]"))
dart/nvimts__highlights.scm:  (#lua-match? @type "^[%u%l]"))
dart/nvimts__highlights.scm:  (#lua-match? @type "^_?[%u].*[%l]")) ; catch Classes or IClasses not CLASSES
dhall/nvimts__highlights.scm:  (#lua-match? @type "^%u"))
ebnf/nvimts__highlights.scm:  (#lua-match? @type "^%u"))
ebnf/nvimts__highlights.scm:  (#lua-match? @string.special.symbol "^%l"))
ebnf/nvimts__highlights.scm:  (#lua-match? @constant "^%u[%u%d_]+$"))
erlang/nvimts__highlights.scm:  (#lua-match? @comment.documentation "^[%%][%%]"))
fennel/nvimts__highlights.scm:  (#lua-match? @variable.parameter "^%$[1-9]$"))
fennel/nvimts__injections.scm:  (#lua-match? @injection.content "^%s*;+%s?query")
glimmer/nvimts__highlights.scm:  (#lua-match? @tag "^:?[%l]"))
glimmer/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
htmldjango/nvimts__highlights.scm:  (#lua-match? @number "^%d+$"))
internal/queries/nvim_remaining/ecma/highlights.scm:  (#lua-match? @constant "^_*[A-Z][A-Z%d_]*$"))
internal/queries/nvim_remaining/ecma/highlights.scm:  (#lua-match? @constant "^_*[A-Z][A-Z%d_]*$"))
internal/queries/nvim_remaining/html_tags/injections.scm:  (#not-lua-match? @_no_type_lang "%slang%s*=")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#not-lua-match? @_no_type_lang "%stype%s*=")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#not-lua-match? @_no_type_lang "%slang%s*=")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#not-lua-match? @_no_type_lang "%stype%s*=")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#lua-match? @injection.content "%${")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#lua-match? @injection.content "%${")
java/nvimts__highlights.scm:  (#lua-match? @constant "^[A-Z_][A-Z%d_]+$"))
latex/nvimts__highlights.scm:  (#lua-match? @keyword.directive "^%% !TeX"))
latex/nvimts__highlights.scm:  (#lua-match? @keyword.directive "^%%&"))
linkerscript/highlights.scm:  (#lua-match? @constant "^[%u_][%u%d_]+$"))
linkerscript/highlights.scm:  (#lua-match? @label "^%."))
linkerscript/nvimts__highlights.scm:  (#lua-match? @constant "^[%u_][%u%d_]+$"))
linkerscript/nvimts__highlights.scm:  (#lua-match? @label "^%."))
lua/nvimts__highlights.scm:  (#lua-match? @comment.documentation "^[-][-](%s?)@"))
lua/nvimts__injections.scm:  (#lua-match? @injection.content "^%s*;+%s?query")
lua/nvimts__injections.scm:  (#lua-match? @injection.content "^[-][%s]*[@|]")
luau/highlights.scm:  (#lua-match? @comment.documentation "^[-][-](%s?)@"))
luau/injections.scm:  (#lua-match? @injection.content "[-][-][-][%s]*@")
luau/nvimts__highlights.scm:  (#lua-match? @comment.documentation "^[-][-](%s?)@"))
luau/nvimts__injections.scm:  (#lua-match? @injection.content "[-][-][-][%s]*@")
nasm/nvimts__highlights.scm:  (#lua-match? @constant.builtin "^__%?[A-Z_a-z0-9]+%?__$"))
perl/nvimts__highlights.scm:  (#lua-match? @variable.builtin "%^"))
perl/nvimts__highlights.scm:  (#lua-match? @variable.builtin "^%A+$"))
php_only/nvimts__highlights.scm:  (#lua-match? @constant "^_?[A-Z][A-Z%d_]*$"))
php_only/nvimts__highlights.scm:  (#lua-match? @constant.builtin "^__[A-Z][A-Z%d_]+__$"))
properties/nvimts__highlights.scm:  (#lua-match? @number "^%d+$"))
properties/nvimts__highlights.scm:  (#lua-match? @number "^%d+$"))
python/nvimts__highlights.scm:  (#lua-match? @variable.member "^[%l_].*$"))
python/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
python/nvimts__highlights.scm:  (#lua-match? @constructor "^%u"))
python/nvimts__highlights.scm:  (#lua-match? @variable.member "^[%l_].*$"))
python/nvimts__highlights.scm:  (#lua-match? @variable.member "^[%l_].*$"))
python/nvimts__indents.scm:  (#lua-match? @indent.align "^%([^\n]")
python/nvimts__indents.scm:  (#lua-match? @indent.align "[^\n ]%)$")
python/nvimts__indents.scm:  (#lua-match? @indent.align "[^\n ]%)$")
python/nvimts__indents.scm:  (#lua-match? @indent.align "[^\n ]%)$")
query/highlights.scm:  (#lua-match? @keyword.directive "^;+%s*format%-ignore%s*$"))
query/nvimts__highlights.scm:  (#lua-match? @keyword.directive "^;+%s*format%-ignore%s*$"))
rust/nvimts__highlights.scm:  (#lua-match? @constant "^[A-Z][A-Z%d_]*$"))
rust/nvimts__highlights.scm:  (#lua-match? @constant "^[A-Z][A-Z%d_]*$"))
smali/highlights.scm:  (#lua-match? @constant "^[%u_]*$"))
smali/nvimts__highlights.scm:  (#lua-match? @constant "^[%u_]*$"))
sql/nvimts__highlights.scm:  (#lua-match? @number "^%d+$"))
sql/nvimts__highlights.scm:  (#lua-match? @number.float "^[-]?%d*\.%d*$"))
squirrel/highlights.scm: (#lua-match? @constant "^_*[A-Z][A-Z%d_]*$"))
squirrel/nvimts__highlights.scm:  (#lua-match? @constant "^_*[A-Z][A-Z%d_]*$"))
starlark/nvimts__highlights.scm:  (#lua-match? @variable.member "^[%l_].*$"))
t32/nvimts__highlights.scm:  (#lua-match? @constant.builtin "^[%%/][%l%u][%l%u%d.]*$"))
teal/nvimts__highlights.scm:  (#lua-match? @comment.documentation "^[-][-](%s?)@"))
teal/nvimts__injections.scm:  (#lua-match? @injection.content "^%[%[")
vala/nvimts__highlights.scm:  (#lua-match? @constant "^[%u][%u%d_]*$"))
vala/nvimts__highlights.scm:  (#lua-match? @constant "^[%u][%u%d_]*$"))
vala/nvimts__highlights.scm:  (#lua-match? @constructor "^[%l][%l%d_]*$"))
vim/nvimts__highlights.scm:  (#lua-match? @number "^[%d]+(%.[%d]+)?$"))
zig/nvimts__highlights.scm:  (#lua-match? @type "^%u([%l]+[%u%l%d]*)*$"))
zig/nvimts__highlights.scm:  (#lua-match? @function "^%l+([%u][%l%d]*)+$"))
zig/nvimts__highlights.scm:  (#lua-match? @constant "^%u[%u%d_]+$"))
`
	exp := `bitbake/highlights.scm: (#match? @field "^[[:lower:]_].*$"))
bitbake/highlights.scm: (#match? @constructor "^[:upper:]"))
bitbake/highlights.scm: (#match? @constructor "^[:upper:]"))
bitbake/nvimts__highlights.scm:  (#match? @variable.member "^[[:lower:]_].*$"))
bitbake/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
bitbake/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
cairo/highlights.scm: (#match? @constant "^[A-Z][A-Z[:digit:]_]*$"))
cairo/highlights.scm:  (#match? @constructor "^[:upper:]"))
cairo/nvimts__highlights.scm:  (#match? @constant "^[A-Z][A-Z[:digit:]_]*$"))
cairo/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
clojure/nvimts__highlights.scm:  (#match? @variable.builtin "^\%[:digit:]*$"))
clojure/nvimts__highlights.scm:  (#match? @constructor "^-\>[^>].*"))
clojure/nvimts__highlights.scm:  (#match? @_name "^[[:upper:]][^/[:space:]]*$")) @type
clojure/nvimts__highlights.scm:  (#match? @_name "^\.[^-]"))
clojure/nvimts__highlights.scm:  (#match? @variable.member "^\.\-%S*"))
clojure/nvimts__highlights.scm:  (#match? @_namespace "^[[:upper:]]%S*$")) @variable.member
clojure/nvimts__highlights.scm:    (#match? @_namespace "^[:upper:]")) @function.method)
cmake/nvimts__highlights.scm:  (#match? @constant "^[[:upper:]@][[:upper:][:digit:]_]+$"))
cpp/nvimts__highlights.scm:  (#match? @type "^[[:upper:]]"))
cpp/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
cpp/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
cpp/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
cpp/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
cpp/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
dart/nvimts__highlights.scm:  (#match? @function "^_?[[:lower:]]"))
dart/nvimts__highlights.scm:  (#match? @type "^[[:upper:][:lower:]]"))
dart/nvimts__highlights.scm:  (#match? @type "^_?[[:upper:]].*[[:lower:]]")) ; catch Classes or IClasses not CLASSES
dhall/nvimts__highlights.scm:  (#match? @type "^[:upper:]"))
ebnf/nvimts__highlights.scm:  (#match? @type "^[:upper:]"))
ebnf/nvimts__highlights.scm:  (#match? @string.special.symbol "^[:lower:]"))
ebnf/nvimts__highlights.scm:  (#match? @constant "^[:upper:][[:upper:][:digit:]_]+$"))
erlang/nvimts__highlights.scm:  (#match? @comment.documentation "^[\%][\%]"))
fennel/nvimts__highlights.scm:  (#match? @variable.parameter "^\$[1-9]$"))
fennel/nvimts__injections.scm:  (#match? @injection.content "^[:space:]*;+[:space:]?query")
glimmer/nvimts__highlights.scm:  (#match? @tag "^:?[[:lower:]]"))
glimmer/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
htmldjango/nvimts__highlights.scm:  (#match? @number "^[:digit:]+$"))
internal/queries/nvim_remaining/ecma/highlights.scm:  (#match? @constant "^_*[A-Z][A-Z[:digit:]_]*$"))
internal/queries/nvim_remaining/ecma/highlights.scm:  (#match? @constant "^_*[A-Z][A-Z[:digit:]_]*$"))
internal/queries/nvim_remaining/html_tags/injections.scm:  (#not-match? @_no_type_lang "[:space:]lang[:space:]*=")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#not-match? @_no_type_lang "[:space:]type[:space:]*=")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#not-match? @_no_type_lang "[:space:]lang[:space:]*=")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#not-match? @_no_type_lang "[:space:]type[:space:]*=")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#match? @injection.content "\${")
internal/queries/nvim_remaining/html_tags/injections.scm:  (#match? @injection.content "\${")
java/nvimts__highlights.scm:  (#match? @constant "^[A-Z_][A-Z[:digit:]_]+$"))
latex/nvimts__highlights.scm:  (#match? @keyword.directive "^\% !TeX"))
latex/nvimts__highlights.scm:  (#match? @keyword.directive "^\%&"))
linkerscript/highlights.scm:  (#match? @constant "^[[:upper:]_][[:upper:][:digit:]_]+$"))
linkerscript/highlights.scm:  (#match? @label "^\."))
linkerscript/nvimts__highlights.scm:  (#match? @constant "^[[:upper:]_][[:upper:][:digit:]_]+$"))
linkerscript/nvimts__highlights.scm:  (#match? @label "^\."))
lua/nvimts__highlights.scm:  (#match? @comment.documentation "^[-][-]([:space:]?)@"))
lua/nvimts__injections.scm:  (#match? @injection.content "^[:space:]*;+[:space:]?query")
lua/nvimts__injections.scm:  (#match? @injection.content "^[-][[:space:]]*[@|]")
luau/highlights.scm:  (#match? @comment.documentation "^[-][-]([:space:]?)@"))
luau/injections.scm:  (#match? @injection.content "[-][-][-][[:space:]]*@")
luau/nvimts__highlights.scm:  (#match? @comment.documentation "^[-][-]([:space:]?)@"))
luau/nvimts__injections.scm:  (#match? @injection.content "[-][-][-][[:space:]]*@")
nasm/nvimts__highlights.scm:  (#match? @constant.builtin "^__\?[A-Z_a-z0-9]+\?__$"))
perl/nvimts__highlights.scm:  (#match? @variable.builtin "\^"))
perl/nvimts__highlights.scm:  (#match? @variable.builtin "^%A+$"))
php_only/nvimts__highlights.scm:  (#match? @constant "^_?[A-Z][A-Z[:digit:]_]*$"))
php_only/nvimts__highlights.scm:  (#match? @constant.builtin "^__[A-Z][A-Z[:digit:]_]+__$"))
properties/nvimts__highlights.scm:  (#match? @number "^[:digit:]+$"))
properties/nvimts__highlights.scm:  (#match? @number "^[:digit:]+$"))
python/nvimts__highlights.scm:  (#match? @variable.member "^[[:lower:]_].*$"))
python/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
python/nvimts__highlights.scm:  (#match? @constructor "^[:upper:]"))
python/nvimts__highlights.scm:  (#match? @variable.member "^[[:lower:]_].*$"))
python/nvimts__highlights.scm:  (#match? @variable.member "^[[:lower:]_].*$"))
python/nvimts__indents.scm:  (#match? @indent.align "^\([^\n]")
python/nvimts__indents.scm:  (#match? @indent.align "[^\n ]\)$")
python/nvimts__indents.scm:  (#match? @indent.align "[^\n ]\)$")
python/nvimts__indents.scm:  (#match? @indent.align "[^\n ]\)$")
query/highlights.scm:  (#match? @keyword.directive "^;+[:space:]*format\-ignore[:space:]*$"))
query/nvimts__highlights.scm:  (#match? @keyword.directive "^;+[:space:]*format\-ignore[:space:]*$"))
rust/nvimts__highlights.scm:  (#match? @constant "^[A-Z][A-Z[:digit:]_]*$"))
rust/nvimts__highlights.scm:  (#match? @constant "^[A-Z][A-Z[:digit:]_]*$"))
smali/highlights.scm:  (#match? @constant "^[[:upper:]_]*$"))
smali/nvimts__highlights.scm:  (#match? @constant "^[[:upper:]_]*$"))
sql/nvimts__highlights.scm:  (#match? @number "^[:digit:]+$"))
sql/nvimts__highlights.scm:  (#match? @number.float "^[-]?[:digit:]*\.[:digit:]*$"))
squirrel/highlights.scm: (#match? @constant "^_*[A-Z][A-Z[:digit:]_]*$"))
squirrel/nvimts__highlights.scm:  (#match? @constant "^_*[A-Z][A-Z[:digit:]_]*$"))
starlark/nvimts__highlights.scm:  (#match? @variable.member "^[[:lower:]_].*$"))
t32/nvimts__highlights.scm:  (#match? @constant.builtin "^[\%/][[:lower:][:upper:]][[:lower:][:upper:][:digit:].]*$"))
teal/nvimts__highlights.scm:  (#match? @comment.documentation "^[-][-]([:space:]?)@"))
teal/nvimts__injections.scm:  (#match? @injection.content "^\[\[")
vala/nvimts__highlights.scm:  (#match? @constant "^[[:upper:]][[:upper:][:digit:]_]*$"))
vala/nvimts__highlights.scm:  (#match? @constant "^[[:upper:]][[:upper:][:digit:]_]*$"))
vala/nvimts__highlights.scm:  (#match? @constructor "^[[:lower:]][[:lower:][:digit:]_]*$"))
vim/nvimts__highlights.scm:  (#match? @number "^[[:digit:]]+(\.[[:digit:]]+)?$"))
zig/nvimts__highlights.scm:  (#match? @type "^[:upper:]([[:lower:]]+[[:upper:][:lower:][:digit:]]*)*$"))
zig/nvimts__highlights.scm:  (#match? @function "^[:lower:]+([[:upper:]][[:lower:][:digit:]]*)+$"))
zig/nvimts__highlights.scm:  (#match? @constant "^[:upper:][[:upper:][:digit:]_]+$"))
`

	if act := QueryLuaMatch2Match([]byte(testCase)); string(act) != exp {
		t.Fatalf("Expected\n\n%s\n\ngot\n\n%s\n\n", exp, string(act))
	}
}
