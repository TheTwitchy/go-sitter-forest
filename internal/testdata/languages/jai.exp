(source_file (comment) (comment) (comment) (block_comment (block_comment_text (block_comment (block_comment_text)))) (top_level_declarations (struct_declaration name: (identifier) (struct_or_union (struct_or_union_block (comment) (variable_declaration name: (identifier) type: (types (identifier))) (variable_declaration name: (identifier) type: (types (identifier)) (expressions (literal (string (string_content) (escape_sequence) (string_content) (escape_sequence) (string_content) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence))))) (variable_declaration name: (identifier) (expressions (literal (integer)))) (variable_declaration name: (identifier) type: (types (identifier)) (expressions (literal (float)))) (const_declaration name: (identifier) type: (types (identifier)) (expressions (literal (string (string_content))))) (const_declaration name: (identifier) (expressions (unary_expression argument: (expressions (literal (integer)))))) (const_declaration name: (identifier) type: (types (identifier)) (expressions (literal (string (string_content))))) (comment))))) (top_level_declarations (struct_declaration name: (identifier) (struct_or_union modifier: (named_parameters parameters: (parameter name: (identifier) type: (types (identifier)) default_value: (expressions name: (identifier)))) (struct_or_union_block)))) (top_level_declarations (procedure_declaration name: (identifier) (procedure (named_parameters)) (block (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (identifier) argument: (identifier)))))) (comment) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) (expressions (literal (struct_literal type: (identifier)))))))) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) (expressions (literal (struct_literal type: (types (parameterized_struct_type type: (identifier) (assignment_parameters argument: (expressions (literal (integer))))))))))))) (comment) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) type: (types (parameterized_struct_type type: (identifier) (assignment_parameters argument: (expressions (literal (integer))) argument: (expressions (literal (integer))) argument: (expressions (literal (integer))) argument: (expressions (literal (string (string_content))))))) (expressions (literal (struct_literal parameter: (expressions (literal (integer))) parameter: (expressions (literal (integer))) parameter: (expressions (literal (integer))) parameter: (expressions (literal (string (string_content))))))))))) (comment) (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (struct_literal type: (types (parameterized_struct_type type: (identifier) (assignment_parameters argument: (identifier)))) name: (identifier) parameter: (expressions (literal (integer))) name: (identifier) parameter: (expressions (literal (integer))))))))))) (comment) (comment) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) type: (types (parameterized_struct_type type: (identifier) (assignment_parameters named_argument: (identifier) argument: (expressions (call_expression function: (identifier) (assignment_parameters named_argument: (identifier) argument: (identifier))))))))))) (comment) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) type: (types (procedure_type (assignment_parameters argument: (identifier) argument: (identifier)) result: (procedure_returns (returns type: (identifier))))))))) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) (expressions (call_expression function: (identifier) (assignment_parameters))))))) (comment) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) name: (identifier) (expressions (literal (integer))) (expressions (literal (integer))))))) (statement (all_statements (comma_declarations (const_declaration name: (identifier) name: (identifier) (expressions (literal (integer))) (expressions (literal (integer))))))) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) name: (identifier) type: (types (array_type type: (identifier))) (expressions (literal (array_literal (expressions (literal (string))) (expressions (literal (string)))))) (expressions (literal (array_literal type: (identifier) (expressions (literal (string))) (expressions (literal (string)))))))))) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) name: (identifier) (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content))))))))))) (statement (all_statements (assignment_statement (identifier) (identifier) (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content)))))))))) (statement (all_statements (comma_declarations (const_declaration name: (identifier) name: (identifier) (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content))))))))))) (comment) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) name: (identifier) name: (identifier) name: (identifier) name: (identifier) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))))))) (statement (all_statements (comma_declarations (const_declaration name: (identifier) name: (identifier) name: (identifier) name: (identifier) name: (identifier) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))))))) (comment) (statement (all_statements (assignment_statement (identifier) (identifier) (identifier) (identifier) (identifier) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer)))))) (statement (all_statements (update_statement (identifier) (identifier) (identifier) (identifier) (identifier) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer))) (expressions (literal (integer)))))) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) (expressions (address (expressions name: (identifier)))))))) (statement (no_semicolon_statements (if_statement (if_statement_condition_and_consequence condition: (if_condition (expressions (binary_expression left: (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content))))))) right: (expressions (literal (integer)))))) (comment) consequence: (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence))))))))) alternative: (else_clause consequence: (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence)))))))))))))) (statement (no_semicolon_statements (static_if_statement directive: (compiler_directive) directive: (compiler_directive) (if_statement_condition_and_consequence condition: (if_condition (expressions (binary_expression left: (expressions name: (identifier)) right: (expressions (literal (null)))))) consequence: (statement (no_semicolon_statements (block (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string))))))))))) alternative: (else_clause consequence: (statement (no_semicolon_statements (static_if_statement directive: (compiler_directive) directive: (compiler_directive) (if_statement_condition_and_consequence condition: (if_condition (expressions (binary_expression left: (expressions name: (identifier)) right: (expressions (literal (struct_literal)))))) consequence: (statement (no_semicolon_statements (block (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string))))))))))) alternative: (else_clause consequence: (statement (no_semicolon_statements (block (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string))))))))))))))))))))) (statement (no_semicolon_statements (if_statement (if_statement_condition_and_consequence condition: (if_condition (expressions name: (identifier))) consequence: (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string)))))))) alternative: (else_clause consequence: (statement (no_semicolon_statements (if_statement (if_statement_condition_and_consequence condition: (if_condition (expressions name: (identifier))) consequence: (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string)))))))) alternative: (else_clause consequence: (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string)))))))))))))))))) (comment) (statement (no_semicolon_statements (if_statement (if_statement_condition_and_consequence condition: (if_condition (expressions (binary_expression left: (expressions (literal (integer))) right: (expressions (pointer_expression argument: (expressions name: (identifier))))))) consequence: (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters))))))))) (statement (no_semicolon_statements (if_statement (if_statement_condition_and_consequence condition: (if_condition (expressions (binary_expression left: (expressions name: (identifier)) right: (expressions (literal (integer)))))) consequence: (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence))))))))) alternative: (else_clause consequence: (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence)))))))))))))) (comment) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) (expressions (if_expression condition: (expressions name: (identifier)) consequence: (expressions (member_expression (identifier) (identifier))) alternative: (expressions (literal (string))))))))) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) (expressions (if_expression condition: (expressions name: (identifier)) consequence: (expressions (member_expression (identifier) (identifier))))))))) (comment) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) (expressions (if_expression condition: (expressions name: (identifier)) consequence: (block (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence))))))))) (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (integer)))))))) (statement (all_statements (expressions (member_expression (identifier) (identifier)))))) alternative: (block (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence))))))))) (statement (all_statements (comma_declarations (variable_declaration name: (identifier) (expressions (literal (integer))))))) (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence))))))))) (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters))))))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (MISSING ";"))))) (top_level_declarations (procedure_declaration name: (identifier) (procedure (named_parameters parameters: (parameter name: (identifier) type: (types (polymorphic_type (types (identifier)))))) result: (procedure_returns (returns (types (procedure_type (named_parameters)))))) (block (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence)))) argument: (expressions (literal (integer))) argument: (identifier) argument: (expressions (literal (string (string_content)))) argument: (expressions (literal (struct_literal parameter: (expressions (literal (integer)))))) argument: (expressions (literal (array_literal (expressions (literal (integer))))))))))) (statement (all_statements (expressions (call_expression function: (identifier) (assignment_parameters argument: (expressions (literal (string (string_content) (escape_sequence)))) argument: (identifier))))))))))
