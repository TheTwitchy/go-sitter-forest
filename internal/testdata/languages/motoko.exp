(prog (blockcomment) (dec (dec_type name: (name) (typ_bind binding: (name)) type: (typ (typ_array (typ (typ_id name: (name))))))) (dec (dec_class name: (name) (typ_bind binding: (name)) pat: (pat_tuple (pat_bin (name) pat_type: (typ (typ_func param: (typ_tuple (typ_item (typ (typ_id name: (name)))) (typ_item (typ (typ_id name: (name))))) return: (typ_id name: (name)))))) (dec_field vis: (vis) (dec (dec_func name: (name) pat: (pat_tuple (pat_bin (name) pat_type: (typ (typ_id name: (name) (typ_args (typ (typ_id name: (name))))))) (pat_bin (name) pat_type: (typ (typ_id name: (name)))) (pat_bin (name) pat_type: (typ (typ_id name: (name))))) body: (block (dec (if antecedent: (exp_plain (exp (exp_bin arg0: (name) arg1: (name)))) consequence: (block (dec (dec_let pat: (pat (name)) value: (exp (call invoked: (name) arg: (exp_plain (exp (name)) (exp (name)) (exp (name))))))) (dec (call invoked: (name) arg: (exp_plain (exp (name)) (exp (name)) (exp (name))))) (dec (call invoked: (name) arg: (exp_plain (exp (name)) (exp (exp_bin arg0: (name) arg1: (exp_plain (nat)))) (exp (name)))))))))))) (dec_field (dec (dec_func name: (name) pat: (pat_tuple (pat_bin (name) pat_type: (typ (typ_id name: (name) (typ_args (typ (typ_id name: (name))))))) (pat_bin (name) pat_type: (typ (typ_id name: (name)))) (pat_bin (name) pat_type: (typ (typ_id name: (name))))) body: (block (dec (dec_let pat: (pat (name)) value: (exp (exp_post (name) index: (exp (name)))))) (dec (assign binding: (exp_post (name) index: (exp (name))) value: (exp (exp_post (name) index: (exp (name)))))) (dec (assign binding: (exp_post (name) index: (exp (name))) value: (exp (name)))))))) (dec_field (dec (dec_func name: (name) (typ_bind binding: (name)) pat: (pat_tuple (pat_bin (name) pat_type: (typ (typ_id name: (name))))) body: (block)))) (dec_field (dec (dec_func name: (name) pat: (pat_tuple (pat_bin (name) pat_type: (typ (typ_id name: (name) (typ_args (typ (typ_id name: (name))))))) (pat_bin (name) pat_type: (typ (typ_id name: (name)))) (pat_bin (name) pat_type: (typ (typ_id name: (name))))) return_type: (typ (typ_id name: (name))) body: (block (dec (call invoked: (name) (typ (typ_id name: (name) (typ_args (typ (typ_id name: (name)))))) arg: (exp_plain (exp (name))))) (dec (dec_let pat: (pat (name)) value: (exp (exp_post (name) index: (exp (name)))))) (dec (dec_var name: (name) value: (exp (name)))) (dec (dec_var name: (name) value: (exp (name)))) (dec (loop (block (dec (while control: (exp_plain (exp (exp_bin arg0: (call invoked: (name) arg: (exp_plain (exp (exp_post (name) index: (exp (name)))) (exp (name)))) arg1: (exp_plain (nat))))) body: (block (dec (binassign binding: (name) value: (exp (exp_plain (nat)))))))) (dec (while control: (exp_plain (exp (exp_bin arg0: (call invoked: (name) arg: (exp_plain (exp (exp_post (name) index: (exp (name)))) (exp (name)))) arg1: (exp_plain (nat))))) body: (block (dec (binassign binding: (name) value: (exp (exp_plain (nat)))))))) (dec (if antecedent: (exp_plain (exp (exp_bin arg0: (name) arg1: (name)))) consequence: (exp (return with: (exp (name)))))) (dec (call invoked: (name) arg: (exp_plain (exp (name)) (exp (name)) (exp (name))))) (dec (binassign binding: (name) value: (exp (exp_plain (nat))))) (dec (binassign binding: (name) value: (exp (exp_plain (nat)))))))))))))) (dec (dec_func name: (name) pat: (pat_tuple (pat_bin (name) pat_type: (typ (typ_id name: (name)))) (pat_bin (name) pat_type: (typ (typ_id name: (name))))) return_type: (typ (typ_id name: (name))) body: (exp (exp_bin arg0: (name) arg1: (name))))) (dec (dec_let pat: (pat (name)) value: (exp (call invoked: (name) (typ (typ_id name: (name))) arg: (exp_plain (exp (name))))))) (dec (dec_let pat: (pat (pat_bin (name) pat_type: (typ (typ_id name: (name) (typ_args (typ (typ_id name: (name)))))))) value: (exp (array (exp_plain (nat)) (exp_plain (nat)) (exp_plain (nat)) (exp_plain (nat)) (exp_plain (nat)) (exp_plain (nat)))))) (dec (call invoked: (exp_post (name) member: (name)) arg: (exp_plain (exp (name)) (exp (exp_plain (nat))) (exp (exp_bin arg0: (call invoked: (exp_post (name) member: (name)) arg: (exp_plain)) arg1: (exp_plain (nat))))))))