(source_file (module_clause (identifier)) (import_list (import_declaration (import_spec (import_path (import_name (identifier)) (import_name (identifier))))) (import_declaration (import_spec (import_path (import_name (identifier)))))) (function_declaration name: (identifier) signature: (signature parameters: (parameter_list)) body: (block (simple_statement (var_declaration var_list: (expression_list (mutable_expression (mutability_modifiers) (reference_expression (identifier)))) expression_list: (expression_list (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) type_parameters: (type_parameters (plain_type (qualified_type module: (reference_expression (identifier)) name: (type_reference_expression (identifier))))) arguments: (argument_list (argument (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))))))))) (simple_statement (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) arguments: (argument_list (argument (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))))))) (simple_statement (var_declaration var_list: (expression_list (reference_expression (identifier))) expression_list: (expression_list (literal (interpreted_string_literal))))) (simple_statement (var_declaration var_list: (expression_list (reference_expression (identifier))) expression_list: (expression_list (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) arguments: (argument_list (argument (keyed_element key: (field_name (reference_expression (identifier))) value: (reference_expression (identifier))))))))) (simple_statement (var_declaration var_list: (expression_list (reference_expression (identifier))) expression_list: (expression_list (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) arguments: (argument_list))))) (simple_statement (call_expression name: (reference_expression (identifier)) arguments: (argument_list (argument (reference_expression (identifier)))))) (simple_statement (var_declaration var_list: (expression_list (reference_expression (identifier))) expression_list: (expression_list (option_propagation_expression (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) arguments: (argument_list)))))) (simple_statement (if_expression condition: (binary_expression left: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) right: (enum_fetch (reference_expression (identifier)))) block: (block (simple_statement (if_expression guard: (var_declaration var_list: (expression_list (reference_expression (identifier))) expression_list: (expression_list (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) arguments: (argument_list (argument (literal (interpreted_string_literal))))))) block: (block (simple_statement (call_expression name: (reference_expression (identifier)) arguments: (argument_list (argument (literal (interpreted_string_literal (string_interpolation (interpolation_opening) (interpolation_expression (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) arguments: (argument_list (argument (reference_expression (identifier)))))) (interpolation_closing)))))))) (simple_statement (call_expression name: (reference_expression (identifier)) arguments: (argument_list (argument (literal (interpreted_string_literal (string_interpolation (interpolation_opening) (interpolation_expression (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) arguments: (argument_list))) (interpolation_closing)))))))) (simple_statement (call_expression name: (reference_expression (identifier)) arguments: (argument_list (argument (literal (interpreted_string_literal (string_interpolation (interpolation_opening) (interpolation_expression (selector_expression operand: (call_expression name: (selector_expression operand: (reference_expression (identifier)) field: (reference_expression (identifier))) arguments: (argument_list)) field: (reference_expression (identifier)))) (interpolation_closing)))))))))))))))))
