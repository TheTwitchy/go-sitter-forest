(ERROR (object_id (integer)) (object_name name: (name)) (ERROR (UNEXPECTED '"')) (property_list (property property_value: (subtype_value)) (property property_value: (single_instance_value (boolean)))) (ERROR (UNEXPECTED 'v') (permission_type) (UNEXPECTED 'r') (permission_type) (UNEXPECTED 'n') (permission_type) (UNEXPECTED 'n')) (var_section (variable_declaration name: (identifier) type: (type_specification (basic_type)))) (ERROR) (var_section (variable_declaration name: (identifier) type: (type_specification (text_type)))) (ERROR (identifier) (identifier) (string_literal) (permission_type) (UNEXPECTED 's') (UNEXPECTED 'c') (UNEXPECTED 'm') (permission_type) (UNEXPECTED 'l') (permission_type) (UNEXPECTED 'c') (permission_type) (UNEXPECTED 'r') (permission_type) (UNEXPECTED '(') (UNEXPECTED 'l') (UNEXPECTED 'c')) (procedure_modifier) (name) (parameter_list (parameter modifier: (modifier) parameter_name: (name) parameter_type: (type)) (parameter parameter_name: (name) parameter_type: (type))) return_type: (return_type (basic_type)) (var_section (variable_declaration name: (identifier) type: (type_specification (basic_type)))) (assignment_statement left: (identifier) (ERROR (integer) (UNEXPECTED ' ')) (ERROR (integer)) right: (integer)) (identifier) (ERROR (integer)) (exit_statement (value_exit (binary_expression left: (identifier) operator: (arithmetic_operator) right: (integer)) (MISSING ";"))) (identifier) (ERROR (binary_expression left: (integer) (ERROR (integer) (UNEXPECTED ' ') (UNEXPECTED ' ')) operator: (arithmetic_operator) right: (identifier)) (integer) (value_set (integer)) (UNEXPECTED ' ') (UNEXPECTED ' ') (permission_type) (UNEXPECTED 'n') (permission_type) (UNEXPECTED 'i') (permission_type) (UNEXPECTED 'e') (permission_type) (UNEXPECTED 'n') (permission_type) (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (integer) (ERROR (permission_type) (UNEXPECTED ' ') (permission_type) (UNEXPECTED 'n') (permission_type)) operator: (arithmetic_operator) (ERROR) right: (integer)) (ERROR (UNEXPECTED ' ')) operator: (arithmetic_operator) (ERROR) right: (integer)) (ERROR (integer) (permission_type) (UNEXPECTED 'n') (permission_type)) operator: (arithmetic_operator) (ERROR) right: (integer)) (ERROR (UNEXPECTED ' ')) operator: (arithmetic_operator) (ERROR) right: (integer)) (ERROR (integer) (permission_type) (UNEXPECTED 'n') (permission_type)) operator: (comparison_operator) right: (integer)) (identifier) (UNEXPECTED 'v') (permission_type) (UNEXPECTED 'r') (permission_type) (value_set (enum_member_access enum_type: (identifier) member: (identifier)) (MISSING ")") (enum_member_access enum_type: (identifier)) (string_literal) (string_literal) (boolean) (boolean)) (procedure_modifier) (UNEXPECTED 'S') (permission_type) (UNEXPECTED 'E') (permission_type) (UNEXPECTED 'r') (permission_type)) (case_clause value_set: (value_set (identifier) (ERROR (permission_type) (UNEXPECTED 'c') (UNEXPECTED ')'))) (ERROR (arithmetic_operator) (ERROR (UNEXPECTED 'v') (permission_type) (UNEXPECTED 'r') (permission_type) (UNEXPECTED 'g') (permission_type) (UNEXPECTED '\n') (UNEXPECTED 'T') (permission_type) (UNEXPECTED '(')) (identifier) (UNEXPECTED 'a') (permission_type) (UNEXPECTED ':') (UNEXPECTED 'u') (permission_type) (UNEXPECTED 'n') (permission_type) (UNEXPECTED ':') (UNEXPECTED 'c')) (ERROR) (code_block (if_statement condition: (identifier) then_branch: (procedure_call call: (method_call target: (identifier) arguments: (argument_list (string_literal) (identifier) (identifier))) (MISSING ";")) else_branch: (procedure_call call: (method_call target: (identifier) arguments: (argument_list (string_literal) (identifier) (identifier))))))) (case_clause value_set: (value_set (identifier)) (ERROR (UNEXPECTED 'T') (permission_type) (UNEXPECTED '(') (identifier) (UNEXPECTED 'a') (permission_type) (UNEXPECTED ':') (UNEXPECTED 'u') (permission_type) (UNEXPECTED 'n') (permission_type) (UNEXPECTED ':')) (ERROR) (code_block (procedure_call call: (method_call target: (identifier) arguments: (argument_list (string_literal) (identifier) (identifier)))) (exit_statement (value_exit (boolean))))))
