(source_file (contract (type_identifier) (args_def) (func (annotation (identifier) (annotation_field (identifier) (bool))) (func_id (identifier)) (args_def (arg_def (identifier) (primitive_type)) (arg_def (identifier) (primitive_type))) (return_type (bracket_return_type (primitive_type))) (if_else_stmt (if_branch_stmt (binary_expr left: (identifier) operator: (op_gt) right: (typed_num (integer))) (block (return_stmt (binary_expr left: (identifier) operator: (op_div) right: (paren_expr (binary_expr left: (typed_num (integer)) operator: (op_exp) right: (paren_expr (binary_expr left: (identifier) operator: (op_sub) right: (typed_num (integer))))))))))) (return_stmt (identifier))) (func (annotation (identifier) (annotation_field (identifier) (bool))) (func_id (identifier)) (args_def (arg_def (identifier) (primitive_type)) (arg_def (identifier) (primitive_type))) (return_type (bracket_return_type (primitive_type))) (if_else_stmt (if_branch_stmt (binary_expr left: (identifier) operator: (op_gt) right: (typed_num (integer))) (block (return_stmt (binary_expr left: (identifier) operator: (op_mul) right: (paren_expr (binary_expr left: (typed_num (integer)) operator: (op_exp) right: (paren_expr (binary_expr left: (identifier) operator: (op_sub) right: (typed_num (integer))))))))))) (let_declaration (var_declaration (named_var (identifier))) let_value: (binary_expr left: (typed_num (integer)) operator: (op_sub) right: (identifier))) (return_stmt (identifier)))))