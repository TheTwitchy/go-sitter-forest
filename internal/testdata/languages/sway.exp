(source_file (line_comment) (program_type) (use_declaration argument: (scoped_use_list path: (identifier) list: (use_list (scoped_identifier path: (identifier) name: (identifier)) (scoped_identifier path: (identifier) name: (identifier)) (scoped_identifier path: (identifier) name: (identifier))))) (line_comment) (use_declaration argument: (scoped_identifier path: (identifier) name: (identifier))) (line_comment) (const_item name: (identifier) value: (call_expression function: (scoped_identifier path: (identifier) name: (identifier)) arguments: (arguments (integer_literal)))) (storage_item body: (storage_content_list (storage_content (field_declaration name: (field_identifier) type: (primitive_type)) value: (integer_literal)))) (line_comment) (impl_item trait: (type_identifier) type: (type_identifier) body: (declaration_list (attribute_item (attribute (identifier) arguments: (token_tree (identifier) (identifier))) (attribute (identifier))) (function_item name: (identifier) parameters: (parameters) body: (block (expression_statement (if_expression condition: (binary_expression left: (call_expression function: (identifier) arguments: (arguments)) right: (call_expression function: (scoped_identifier path: (identifier) name: (identifier)) arguments: (arguments))) consequence: (block (line_comment) (line_comment) (line_comment) (expression_statement (call_expression function: (field_expression value: (storage (identifier)) field: (field_identifier)) arguments: (arguments (binary_expression left: (call_expression function: (field_expression value: (storage (identifier)) field: (field_identifier)) arguments: (arguments)) right: (call_expression function: (identifier) arguments: (arguments))))))))))) (attribute_item (attribute (identifier) arguments: (token_tree (identifier) (identifier)))) (function_item name: (identifier) parameters: (parameters (parameter pattern: (identifier) type: (primitive_type)) (parameter pattern: (identifier) type: (type_identifier))) body: (block (let_declaration pattern: (identifier) value: (call_expression function: (field_expression value: (call_expression function: (identifier) arguments: (arguments)) field: (field_identifier)) arguments: (arguments))) (expression_statement (match_expression value: (identifier) body: (match_block (match_arm pattern: (match_pattern (tuple_struct_pattern type: (scoped_identifier path: (identifier) name: (identifier)) (identifier))) value: (call_expression function: (identifier) arguments: (arguments (binary_expression left: (identifier) right: (identifier))))) (match_arm pattern: (match_pattern) value: (call_expression function: (identifier) arguments: (arguments (integer_literal))))))) (empty_statement) (let_declaration pattern: (identifier) value: (call_expression function: (field_expression value: (storage (identifier)) field: (field_identifier)) arguments: (arguments))) (expression_statement (call_expression function: (identifier) arguments: (arguments (binary_expression left: (identifier) right: (identifier))))) (expression_statement (call_expression function: (field_expression value: (storage (identifier)) field: (field_identifier)) arguments: (arguments (binary_expression left: (identifier) right: (identifier))))) (line_comment) (line_comment) (line_comment) (expression_statement (call_expression function: (identifier) arguments: (arguments (call_expression function: (scoped_identifier path: (identifier) name: (identifier)) arguments: (arguments (identifier))) (call_expression function: (scoped_identifier path: (identifier) name: (identifier)) arguments: (arguments)) (identifier)))))))) (line_comment) (line_comment))
