(source_file (line_comment) (struct_item name: (type_identifier) body: (field_declaration_list)) (struct_item name: (type_identifier) body: (field_declaration_list)) (struct_item name: (type_identifier) body: (field_declaration_list)) (struct_item name: (type_identifier) body: (field_declaration_list (field_declaration (visibility_modifier) name: (field_identifier) type: (type_identifier)))) (line_comment) (struct_item name: (type_identifier) body: (field_declaration_list (ERROR (identifier)) (field_declaration (visibility_modifier) name: (field_identifier) type: (type_identifier)) (ERROR (identifier) (identifier) (identifier)))) (struct_item name: (type_identifier) body: (field_declaration_list (ERROR (identifier)) (field_declaration (visibility_modifier) name: (field_identifier) type: (type_identifier)) (ERROR (identifier) (identifier) (identifier)))) (expression_statement (identifier) (MISSING ";")) (expression_statement (struct_expression name: (type_identifier) body: (field_initializer_list (line_comment) (field_initializer field: (field_identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) value: (binary_expression left: (identifier) right: (identifier))) (ERROR (identifier)) (field_initializer field: (field_identifier) value: (assignment_expression left: (assignment_expression left: (field_expression value: (call_expression function: (identifier) (line_comment) (ERROR (identifier) (identifier)) arguments: (arguments (ERROR (identifier)) (self) (ERROR (identifier)) (identifier) (identifier) (ERROR (identifier)) (identifier) (ERROR (identifier)))) (ERROR (self)) field: (field_identifier)) right: (field_expression value: (identifier) (ERROR (identifier)) field: (field_identifier))) right: (binary_expression left: (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments)) right: (identifier)))))) (line_comment) (MISSING ";")) (function_item (visibility_modifier) name: (identifier) parameters: (parameters (self_parameter (mutable_specifier) (self)) (parameter (mutable_specifier) pattern: (identifier) type: (type_identifier))) body: (block (expression_statement (if_expression condition: (binary_expression left: (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments)) right: (field_expression value: (self) field: (field_identifier))) consequence: (block (ERROR (identifier)) (call_expression function: (identifier) arguments: (arguments))))) (expression_statement (if_expression condition: (binary_expression left: (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments)) right: (field_expression value: (self) field: (field_identifier))) consequence: (block (ERROR (identifier)) (call_expression function: (identifier) arguments: (arguments (field_expression value: (identifier) (ERROR (self)) field: (field_identifier))))))) (expression_statement (if_expression condition: (binary_expression left: (field_expression value: (self) field: (field_identifier)) right: (integer_literal)) consequence: (block (compound_assignment_expr left: (index_expression (field_expression value: (self) field: (field_identifier)) (field_expression value: (self) field: (field_identifier))) right: (field_expression value: (self) field: (field_identifier)))))) (assignment_expression left: (field_expression value: (self) field: (field_identifier)) right: (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments (ERROR (assignment_expression left: (field_expression value: (self) field: (field_identifier)) right: (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments)))) (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments (call_expression function: (identifier) arguments: (arguments (call_expression function: (field_expression value: (identifier) (ERROR (identifier)) field: (field_identifier)) arguments: (arguments)) (call_expression function: (field_expression value: (identifier) (ERROR (identifier)) field: (field_identifier)) arguments: (arguments)))))) (MISSING ")")))))) (function_item (visibility_modifier) name: (identifier) parameters: (parameters (self_parameter (mutable_specifier) (self)) (parameter (mutable_specifier) pattern: (identifier) type: (type_identifier))) return_type: (primitive_type) body: (block (let_declaration pattern: (identifier) type: (type_identifier) value: (index_expression (field_expression value: (self) field: (field_identifier)) (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments))) (MISSING ";")) (expression_statement (if_expression condition: (binary_expression left: (identifier) right: (integer_literal)) consequence: (block (assignment_expression left: (index_expression (field_expression value: (self) field: (field_identifier)) (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments))) (ERROR (integer_literal)) right: (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments (ERROR (identifier)) (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments)) (ERROR (identifier)) (identifier))))))) (return_expression (boolean_literal)))) (function_item (visibility_modifier) name: (identifier) parameters: (parameters (self_parameter (mutable_specifier) (self)) (parameter (mutable_specifier) pattern: (identifier) type: (type_identifier))) body: (block (expression_statement (if_expression condition: (binary_expression left: (call_expression function: (field_expression value: (identifier) field: (field_identifier)) arguments: (arguments)) right: (field_expression value: (self) field: (field_identifier))) consequence: (block (ERROR (identifier)) (call_expression function: (identifier) arguments: (arguments))))) (expression_statement (if_expression condition: (field_expression value: (self) field: (field_identifier)) consequence: (block (ERROR (identifier)) (call_expression function: (identifier) arguments: (arguments))))) (assignment_expression left: (field_expression value: (self) field: (field_identifier)) right: (call_expression function: (field_expression value: (call_expression function: (field_expression value: (boolean_literal) (ERROR (identifier)) field: (field_identifier)) arguments: (arguments (call_expression function: (identifier) arguments: (arguments (field_expression value: (identifier) (ERROR (self)) field: (field_identifier)) (field_expression value: (identifier) (ERROR (self)) field: (field_identifier)))))) (ERROR (identifier)) field: (field_identifier)) arguments: (arguments (ERROR (identifier)) (field_expression value: (self) field: (field_identifier)) (ERROR (identifier)) (field_expression value: (self) field: (field_identifier))))))) (ERROR))
