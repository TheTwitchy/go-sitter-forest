
use string_cache::DefaultAtom as Atom;
use grammar::parse_tree::*;
use grammar::pattern::*;
use std::iter::once;
use tok::{self, Tok};
use util::strip;

grammar<'input>(text: &'input str);

pub Grammar: Grammar =
    <module_attributes:ShebangAttribute*>
    <uses:Use*>
    <annotations:Annotation*>
    <lo:@L> "grammar" <hi:@R>
    <tps:GrammarTypeParameters?>
    <parameters:GrammarParameters?>
    <where_clauses:GrammarWhereClauses?>
    ";"
    <items:GrammarItem*> => {
        Grammar { prefix: format!("__"), // adjusted by 'parse_grammar'
                  span: Span(lo, hi),
                  type_parameters: tps.unwrap_or(vec![]),
                  parameters: parameters.unwrap_or(vec![]),
                  where_clauses: where_clauses.unwrap_or(vec![]),
                  items: uses.into_iter().chain(items).collect(),
                  annotations: annotations,
                  module_attributes: module_attributes}
    };
