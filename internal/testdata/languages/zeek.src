
    if (!enable_medium_fidelity_notices)
        return;
    # Detect Treck (tcp_fingerprint_scan.py) using Window size indicator. This is a medium fidelity alert
    if (pkt$win_scale == 0 && pkt$win_size in treck_window_sizes)
        {
        #print"3 TCP windows";
        NOTICE([$note=Treck_TCP_observed,
            $conn=c,
            $identifier=cat(c$id$resp_h),
            $msg=fmt("Treck device TCP artifacts have been observed. If %s is an unpatched Treck device, it could be impacted by the 'Ripple20' vulnerabilities involving the Treck TCP/IP stack https://www.jsof-tech.com/ripple20/ and https://treck.com/vulnerability-reply-information/ <debug info: pkt=%s>", c$id$resp_h, pkt)]);
        }
    local current_packet_header:raw_pkt_hdr = get_current_packet_header();

    # Failsafe for runtime
    if (!current_packet_header?$ip)
        return;
    # Detect encapsulation exploit
    # On page 22 of the pdf, the outer packet has a protocol code of 4 (IPv4 encapsulation)
    # see https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xml
    # "Outer IP packet (fragment 1): IPv4{frag offset=0, MF=1, proto=4, id=0xabcd}"
    if (current_packet_header$ip$p == 4)
        {
        @if (Cluster::is_enabled())
            Broker::publish(Cluster::manager_topic,  Ripple20::worker_to_manager,
                            "seen_ip_in_ip_outer_packet_from", cat(c$id$resp_h), c, cat(current_packet_header));
        @else
            event Ripple20::worker_to_manager("seen_ip_in_ip_outer_packet_from", cat(c$id$resp_h), c, cat(current_packet_header));
        @endif
        #print"5 IP-in-IP";
        # Can't find an easy way to access the More Fragments (MF=1) flag, as this isn't carried in the pkt_hdr currently
        # Hopefully though this packet will also have the Do not fragment flag set to False, and this will improve the accuracy.
        # This notice generated on a worker, as it's cheap and may occur too often to send to the cluster everytime , move this to the manager so to maintain clusterized model consistency
        if (pkt$DF == F)
            {
            NOTICE([$note=Treck_IP_in_IP_outer_packet_observed,
                $conn=c,
                $identifier=cat(c$id$orig_h,c$id$resp_h),
                $msg=fmt("IP-in-IP encapsulation outer packet detected (method 1). If %s is a Treck device, this activity is indicative of 'Ripple20' exploits, CVE-2020-11896, CVE-2020-11898 , CVE-2020-11900 https://www.jsof-tech.com/ripple20/ and https://treck.com/vulnerability-reply-information/ <debug info: pkt= get_current_packet_header=>", c$id$resp_h)]);#, pkt, current_packet_header)]);
            }
        }
    # As a backup to the first detection method, let's look for proto code of 0 in any packet (an encapsulated inner packet) directly following
    # the outer packet (the packet with protocol code 4).
    # On page 22 of the pdf, the internal packet has a proto code of 0
    # Note we can possibly also craft a signature with the len and/or payload.
    # Inner IP packet: IPv4{ihl=0xf, len=100, proto=0} with payload ’\x00’*40+’\x41’*100, but this will be less robust.
    if (current_packet_header$ip$p == 0)
        {
        @if (Cluster::is_enabled())
            Broker::publish(Cluster::manager_topic,  Ripple20::worker_to_manager,
                            "seen_ip_in_ip_inner_packet_from", cat(c$id$resp_h), c, cat(current_packet_header));
        @else
            event Ripple20::worker_to_manager("seen_ip_in_ip_inner_packet_from", cat(c$id$resp_h), c, cat(current_packet_header));
        @endif
        }
    }

# Detect TTL indicator ip_ttl_scan.py (Part 1 being the ICMP TTL 225 indicator)
@if ( Version::number >= 40100 )
event icmp_echo_reply(c: connection, icmp: icmp_info, id: count, seq: count, payload: string)
@else
event icmp_echo_reply(c: connection, icmp: icmp_conn, id: count, seq: count, payload: string)
@endif
    {
    if (!enable_medium_fidelity_notices)
        return;
    # Due to bug in icmp_echo_reply https://github.com/zeek/zeek/issues/1019, am using get_current_packet_header() as workaround
    local current_packet_header:raw_pkt_hdr = get_current_packet_header();
    # Failsafe to prevent runtime error
    if (!current_packet_header?$ip)
        return;

    if (current_packet_header$ip$ttl == 255)
        {
        @if (Cluster::is_enabled())
            Broker::publish(Cluster::manager_topic,  Ripple20::worker_to_manager,
                            "seen_treck_255_ICMP_TTL_from", cat(c$id$orig_h), c, cat("current_packet_header=",cat(current_packet_header),"icmp=",cat(icmp)));
        @else
            event Ripple20::worker_to_manager("seen_treck_255_ICMP_TTL_from", cat(c$id$orig_h), c, cat(cat(current_packet_header, icmp)));
        @endif
        }
    }

# Detect native TTL indicator (Part 2a , size 64 but not RST) as in ip_ttl_scan.py
event connection_established(c: connection)
    {
    if (!enable_medium_fidelity_notices)
        return;
    local current_packet_header:raw_pkt_hdr = get_current_packet_header();
    # Failsafe to prevent runtime error
    if (!current_packet_header?$ip)
        return;
    # Detect scanner TTL indicator (Part 2 (method1), size 64 RST) as in ip_ttl_scan.py
    if (current_packet_header$ip$ttl == 64)
            {
            # print(cat(c$id$resp_h));
            @if (Cluster::is_enabled())
                Broker::publish(Cluster::manager_topic,  Ripple20::worker_to_manager,
                                "seen_treck_64_TCP_TTL_from", cat(c$id$resp_h), c, cat(current_packet_header));
            @else
                event Ripple20::worker_to_manager("seen_treck_64_TCP_TTL_from", cat(c$id$resp_h), c, cat(current_packet_header));
            @endif
            }
    }

event connection_rejected(c: connection)
    {
    # Detect the JSOF scanner by the use of the default ports associated with RST as in ip_ttl_scan.py
    if (c$id$orig_p == 40509/tcp && c$id$resp_p == 40508/tcp)
        {
        #print"4.2 JSOF seen (40509->40508)";
        NOTICE([$note=JSOF_scanner_ports_observed,
                $conn=c,
                $identifier=cat(c$id$orig_h),
                $msg=fmt("JSOF Ripple20 scanner has been observed coming from %s (RST from responder on ports 40509->40508) . https://www.jsof-tech.com/ripple20/", c$id$orig_h)]);
        }

    if (!enable_medium_fidelity_notices)
        return;
    # Detect scanner TTL indicator (Part 2 (method2), TTL 64 RST) as in ip_ttl_scan.py
    local current_packet_header:raw_pkt_hdr = get_current_packet_header();
    # Failsafe to prevent runtime error
    if (!current_packet_header?$ip)
        return;
    if (current_packet_header$ip$ttl == 64)
        {
        @if (Cluster::is_enabled())
            Broker::publish(Cluster::manager_topic,  Ripple20::worker_to_manager,
                            "seen_treck_64_TCP_TTL_from", cat(c$id$resp_h), c, cat(current_packet_header));
        @else
            event Ripple20::worker_to_manager("seen_treck_64_TCP_TTL_from", cat(c$id$resp_h), c, cat(current_packet_header));
        @endif
        }
    }
