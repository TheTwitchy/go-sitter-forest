(module (line_comment) (line_comment) (statement (use (identifier) (identifier))) (statement (let identifier: (identifier) value: (fn (fn_type (params (identifier))) (block (statement (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (identifier) (string)))) (statement (let identifier: (identifier) value: (map))) (statement (let identifier: (identifier) value: (call function: (identifier) (string) (string)))) (statement (loop (block (statement (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (identifier)))) (statement (if (binary_exp (identifier) (null)) (block (statement (break))))) (statement (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (number)))) (statement (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (number)))) (statement (let identifier: (identifier) value: (call function: (identifier) (string) (string)))) (statement (loop (block (statement (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (identifier)))) (statement (if (binary_exp (identifier) (null)) (block (statement (break))))) (statement (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (number)))) (statement (if (binary_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (null)) (block (statement (call function: (property_exp (identifier) (property_identifier)) (identifier) (list)))))) (statement (call function: (property_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (property_identifier)) (identifier))) (statement (if (binary_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (null)) (block (statement (call function: (property_exp (identifier) (property_identifier)) (identifier) (list)))))) (statement (call function: (property_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (property_identifier)) (identifier))))))))) (statement (return (identifier))))))) (statement (let identifier: (identifier) value: (fn (fn_type (params (identifier) (identifier))) (block (statement (let identifier: (identifier) value: (map))) (ERROR (identifier) (UNEXPECTED 'f') (UNEXPECTED 'k') (call function: (identifier))) (statement (block (statement (call function: (property_exp (identifier) (property_identifier)) (identifier) (list))) (statement (let identifier: (identifier) value: (bool))) (ERROR (identifier) (UNEXPECTED 'f') (UNEXPECTED 't') (call function: (property_exp (identifier) (property_identifier)))) (statement (block (statement (let identifier: (identifier) value: (bool))) (ERROR (identifier) (UNEXPECTED 'f') (call function: (property_exp (identifier) (property_identifier)))) (statement (block (statement (if (binary_exp (binary_exp (binary_exp (identifier) (call function: (property_exp (identifier) (property_identifier)) (number))) (binary_exp (identifier) (call function: (property_exp (identifier) (property_identifier)) (number)))) (binary_exp (binary_exp (identifier) (call function: (property_exp (identifier) (property_identifier)) (number))) (binary_exp (identifier) (call function: (property_exp (identifier) (property_identifier)) (number))))) (block (statement (assignment (identifier) (bool))) (statement (break))))))) (statement (if (binary_exp (identifier) (bool)) (block (statement (call function: (property_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (property_identifier)) (identifier))) (statement (assignment (identifier) (bool)))))))) (statement (if (binary_exp (identifier) (bool)) (block (statement (call function: (property_exp (identifier) (property_identifier)) (identifier)))))))) (statement (return (identifier))))))) (statement (let identifier: (identifier) value: (fn (fn_type (params (identifier) (identifier) (identifier))) (block (statement (if (binary_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (bool)) (block (statement (return (number)))))) (statement (let identifier: (identifier) value: (number))) (statement (call function: (property_exp (identifier) (property_identifier)) (identifier) (bool))) (ERROR (identifier) (UNEXPECTED 'f') (UNEXPECTED 't') (call function: (property_exp (identifier) (property_identifier)))) (statement (block (statement (if (binary_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (null)) (block (statement (assignment (identifier) (binary_exp (identifier) (call function: (identifier) (identifier) (identifier) (identifier)))))))))) (statement (return (identifier))))))) (statement (let identifier: (identifier) value: (fn (fn_type (params (identifier))) (block (statement (let identifier: (identifier) value: (map))) (statement (let identifier: (identifier) value: (list))) (ERROR (identifier) (UNEXPECTED 'f') (UNEXPECTED 'k') (call function: (identifier))) (statement (block (statement (let identifier: (identifier) value: (call function: (identifier) (identifier) (identifier) (identifier)))) (statement (if (binary_exp (identifier) (number)) (block (statement (call function: (property_exp (identifier) (property_identifier)) (identifier)))))))) (statement (return (identifier))))))) (statement (let identifier: (identifier) value: (call function: (identifier) (call function: (property_exp (identifier) (property_identifier)) (number))))) (statement (let identifier: (identifier) value: (call function: (identifier) (identifier) (list (list (string) (string)) (list (string) (string)) (list (string) (string)))))) (statement (let identifier: (identifier) value: (call function: (identifier) (identifier)))) (statement (call function: (identifier) (binary_exp (call function: (property_exp (identifier) (property_identifier)) (number)) (call function: (property_exp (identifier) (property_identifier)) (number))))))
