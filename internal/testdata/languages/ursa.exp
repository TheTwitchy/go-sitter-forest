(module (line_comment) (line_comment) (use (identifier) (identifier)) (let identifier: (identifier) value: (lambda (identifier) (block (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (identifier) (string))) (let identifier: (identifier) value: (map)) (let identifier: (identifier) value: (call function: (identifier) (string) (string))) (loop (block (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (identifier))) (if (binary_exp (identifier) (null)) (block (break))) (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (number))) (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (number))) (let identifier: (identifier) value: (call function: (identifier) (string) (string))) (loop (block (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (identifier))) (if (binary_exp (identifier) (null)) (block (break))) (let identifier: (identifier) value: (call function: (property_exp (identifier) (property_identifier)) (number))) (if (binary_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (null)) (block (call function: (property_exp (identifier) (property_identifier)) (identifier) (list)))) (call function: (property_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (property_identifier)) (identifier)) (if (binary_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (null)) (block (call function: (property_exp (identifier) (property_identifier)) (identifier) (list)))) (call function: (property_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (property_identifier)) (identifier)))))) (return (identifier))))) (let identifier: (identifier) value: (lambda (identifier) (identifier) (block (ERROR (call function: (property_exp (let identifier: (identifier) value: (map)) (ERROR (identifier) (UNEXPECTED 'f')) (property_identifier)))) (block (ERROR (call function: (property_exp (call function: (property_exp (call function: (property_exp (identifier) (property_identifier)) (identifier) (list)) (ERROR (let identifier: (identifier) value: (bool)) (identifier) (UNEXPECTED 'f')) (property_identifier)) (identifier)) (property_identifier)))) (block (let identifier: (identifier) value: (bool)) (ERROR (identifier) (UNEXPECTED 'f') (call function: (property_exp (identifier) (property_identifier)))) (block (if (binary_exp (binary_exp (binary_exp (identifier) (call function: (property_exp (identifier) (property_identifier)) (number))) (binary_exp (identifier) (call function: (property_exp (identifier) (property_identifier)) (number)))) (binary_exp (binary_exp (identifier) (call function: (property_exp (identifier) (property_identifier)) (number))) (binary_exp (identifier) (call function: (property_exp (identifier) (property_identifier)) (number))))) (block (assignment (identifier) (bool)) (break)))) (if (binary_exp (identifier) (bool)) (block (call function: (property_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (property_identifier)) (identifier)) (assignment (identifier) (bool))))) (if (binary_exp (identifier) (bool)) (block (call function: (property_exp (identifier) (property_identifier)) (identifier))))) (return (identifier))))) (let identifier: (identifier) value: (lambda (identifier) (identifier) (identifier) (block (if (binary_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (bool)) (block (return (number)))) (let identifier: (identifier) value: (number)) (call function: (property_exp (identifier) (property_identifier)) (identifier) (bool)) (ERROR (identifier) (UNEXPECTED 'f') (UNEXPECTED 't') (call function: (property_exp (identifier) (property_identifier)))) (block (if (binary_exp (call function: (property_exp (identifier) (property_identifier)) (identifier)) (null)) (block (assignment (identifier) (binary_exp (identifier) (call function: (identifier) (identifier) (identifier) (identifier))))))) (return (identifier))))) (let identifier: (identifier) value: (lambda (identifier) (block (ERROR (call function: (property_exp (let identifier: (identifier) value: (map)) (ERROR (let identifier: (identifier) value: (list)) (identifier) (UNEXPECTED 'f')) (property_identifier)))) (block (let identifier: (identifier) value: (call function: (identifier) (identifier) (identifier) (identifier))) (if (binary_exp (identifier) (number)) (block (call function: (property_exp (identifier) (property_identifier)) (identifier))))) (return (identifier))))) (let identifier: (identifier) value: (call function: (identifier) (call function: (property_exp (identifier) (property_identifier)) (number)))) (let identifier: (identifier) value: (call function: (identifier) (identifier) (list (list (string) (string)) (list (string) (string)) (list (string) (string))))) (let identifier: (identifier) value: (call function: (identifier) (identifier))) (call function: (identifier) (binary_exp (call function: (property_exp (identifier) (property_identifier)) (number)) (call function: (property_exp (identifier) (property_identifier)) (number)))))
