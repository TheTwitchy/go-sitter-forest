(source_file (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (ERROR (identifier) (identifier) (identifier) (identifier)) (ERROR (identifier) (identifier) (identifier) (identifier)) (ERROR (ERROR (identifier) (identifier) (identifier) (identifier) (identifier)) (identifier)) (block (var_decl (let_decl (single_var name: (identifier) value: (call_expression function: (field_expression object: (qualified_identifier namespace: (identifier) member: (identifier)) property: (field_identifier)) arguments: (call_args (expression_list (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args)))))))) (if_expression condition: (parenthesized_expression content: (else_expression (call_expression function: (field_expression object: (identifier) property: (field_identifier)) arguments: (call_args)) (block (ERROR (identifier))))) consequence: (block (return_expression) (call_expression function: (field_expression object: (identifier) property: (field_identifier)) arguments: (call_args)))) (return_expression) (string_literal)) (fn_decl name: (identifier) parameters: (param_list (param bind: (identifier) (type_annotation type: (primitive_type)))) return_type: (return_spec err_ident: (err_tkn) type: (primitive_type)) body: (fn_body (fn_block (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (identifier)))) (var_decl (let_decl (single_var name: (identifier) value: (call_expression function: (identifier) arguments: (call_args))))) (return_expression) (else_expression (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (identifier) (number_literal (integer_literal))))) (block (call_expression function: (identifier) arguments: (call_args (expression_list (bool_literal))))))))) (fn_decl name: (identifier) parameters: (param_list) body: (fn_body (fn_block (for_expression (while body: (block (var_decl (let_decl (single_var name: (identifier) value: (else_expression (call_expression function: (identifier) arguments: (call_args (expression_list (string_literal (string_content))))) (block (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (string_literal (string_content))))) (continue_statement)))))) (var_decl (let_decl (single_var name: (identifier) value: (else_expression (call_expression function: (identifier) arguments: (call_args (expression_list (string_literal (string_content))))) (block (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (string_literal (string_content))))) (continue_statement)))))) (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (string_literal (string_content) (escape_sequence) (string_content))))) (var_decl (let_decl (single_var name: (identifier) value: (call_expression function: (identifier) arguments: (call_args))))) (match_statement match_expression: (identifier) body: (match_block (match_case seperator: (branch_sep) patterns: (pattern_list pattern: (string_literal (string_content))) body: (case_body (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))))) (match_case seperator: (branch_sep) patterns: (pattern_list pattern: (string_literal (string_content))) body: (case_body (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))))) (match_case seperator: (branch_sep) patterns: (pattern_list pattern: (string_literal (string_content))) body: (case_body (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))))) (match_case seperator: (branch_sep) patterns: (pattern_list pattern: (string_literal (string_content))) body: (case_body (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))))) (base_case pattern_token: (branch_sep) body: (case_body (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (call_args (expression_list (string_literal (string_content))))))))))))))))
