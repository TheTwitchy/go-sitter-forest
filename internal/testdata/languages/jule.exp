(source_file (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (use_declaration (aliased alias: (identifier) path: (scoped_type_identifier path: (identifier) name: (identifier)))) (use_declaration (aliased alias: (identifier) path: (scoped_type_identifier path: (identifier) name: (identifier)))) (use_declaration (aliased alias: (identifier) path: (scoped_type_identifier path: (identifier) name: (identifier)))) (function_declaration name: (identifier) parameters: (parameters) (return_type (single_return_type type: (primitive_type)))) (ERROR (let_declaration name: (identifier) value: (field_expression value: (scoped_identifier path: (identifier) name: (identifier)) field: (call_expression function: (identifier) arguments: (arguments (call_expression function: (scoped_identifier path: (identifier) name: (identifier)) arguments: (arguments)))))) (ERROR (field_expression value: (identifier) field: (call_expression function: (identifier) arguments: (arguments))) (identifier)) (ERROR (type_identifier) (identifier) (return_expression values: (field_expression value: (identifier) field: (call_expression function: (identifier) arguments: (arguments))))) (return_expression values: (string_literal)) (ERROR (identifier) (type_identifier)) (ERROR (primitive_type) (exception_flag) (primitive_type)) (ERROR (call_expression function: (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (identifier))) (ERROR (identifier) (identifier)) arguments: (arguments))) (return_expression (ERROR (call_expression function: (scoped_identifier path: (identifier) name: (identifier)) arguments: (arguments (identifier) (integer_literal))) (identifier) (map_expression (ERROR (call_expression function: (identifier) arguments: (arguments (boolean_literal)))))) values: (function_literal name: (identifier) parameters: (parameters) body: (block (for_expression body: (block (let_declaration name: (identifier) value: (call_expression function: (identifier) arguments: (arguments (string_literal)))) (struct_expression name: (identifier) body: (struct_expr_body (struct_expr_field (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (string_literal)))) (ERROR (identifier)))) (let_declaration name: (identifier) value: (call_expression function: (identifier) arguments: (arguments (string_literal)))) (struct_expression name: (identifier) body: (struct_expr_body (struct_expr_field (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (string_literal)))) (ERROR (identifier)))) (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (string_literal))) (let_declaration name: (identifier) value: (call_expression function: (identifier) arguments: (arguments))) (match_expression (match_value (identifier)) (match_case (case_expression_list (case (string_literal))) (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))) (match_case (case_expression_list (case (string_literal))) (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))) (match_case (case_expression_list (case (string_literal))) (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))) (match_case (case_expression_list (case (string_literal))) (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))) (default_case (cast_expression (simple_cast type: (scoped_type_identifier path: (identifier) name: (identifier)) value: (string_literal))))))))))))