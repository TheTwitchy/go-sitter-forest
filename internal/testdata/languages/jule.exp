(source_file (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (use_decl (aliased_use alias: (value_identifier) path: (scoped_identifier path: (path_identifier) name: (value_identifier)))) (use_decl (aliased_use alias: (value_identifier) path: (scoped_identifier path: (path_identifier) name: (value_identifier)))) (use_decl (aliased_use alias: (value_identifier) path: (scoped_identifier path: (path_identifier) name: (value_identifier)))) (function_decl name: (value_identifier) parameters: (parameters) return_type: (primitive_type) body: (block (let_decl (single_decl name: (value_identifier) value: (field_expression object: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) property: (call_expression caller: (identifier) arguments: (arguments (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments))))))) (if_statement condition: (else_statment condition: (field_expression object: (identifier) property: (call_expression caller: (identifier) arguments: (arguments))) body: (block (use_decl (path_identifier)))) consequence: (block (return_statement values: (expression_list (field_expression object: (identifier) property: (call_expression caller: (identifier) arguments: (arguments))))))) (return_statement values: (expression_list (string_literal))))) (function_decl name: (value_identifier) parameters: (parameters name: (value_identifier) type: (primitive_type)) (error_specifier) return_type: (primitive_type) body: (block (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (identifier))) (let_decl (single_decl name: (value_identifier) value: (call_expression caller: (identifier) arguments: (arguments)))) (return_statement values: (expression_list (else_statment condition: (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (identifier) (integer_literal))) body: (block (call_expression caller: (identifier) arguments: (arguments (bool_literal))))))))) (function_decl name: (value_identifier) parameters: (parameters) body: (block (for_statement (block (let_decl (single_decl name: (value_identifier) value: (else_statment condition: (call_expression caller: (identifier) arguments: (arguments (string_literal (string_content)))) body: (block (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (string_literal (string_content)))) (continue_statement))))) (let_decl (single_decl name: (value_identifier) value: (else_statment condition: (call_expression caller: (identifier) arguments: (arguments (string_literal (string_content)))) body: (block (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (string_literal (string_content)))) (continue_statement))))) (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (string_literal (string_content) (escape_sequence) (string_content)))) (let_decl (single_decl name: (value_identifier) value: (call_expression caller: (identifier) arguments: (arguments)))) (match_statement (match_subject (type_identifier)) body: (match_block (match_branch pattern: (match_case case: (string_literal (string_content))) body: (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))) (match_branch pattern: (match_case case: (string_literal (string_content))) body: (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))) (match_branch pattern: (match_case case: (string_literal (string_content))) body: (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))) (match_branch pattern: (match_case case: (string_literal (string_content))) body: (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (binary_expression left: (identifier) operator: (binary_operator) right: (identifier))))) (match_default_branch body: (call_expression caller: (scoped_type_identifier path: (path_identifier) name: (type_identifier)) arguments: (arguments (string_literal (string_content))))))))))))
