(source_file (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (line_comment) (use_decl (aliased alias: (identifier) import: (simple path: (qualified_identifier namespace: (identifier) member: (identifier))))) (use_decl (aliased alias: (identifier) import: (simple path: (qualified_identifier namespace: (identifier) member: (identifier))))) (use_decl (aliased alias: (identifier) import: (simple path: (qualified_identifier namespace: (identifier) member: (identifier))))) (named_function name: (identifier) parameters: (parameters) return_type: (primitive_type) body: (block (let_decl (single_var name: (identifier) value: (call_expression function: (field_expression object: (qualified_identifier namespace: (identifier) member: (identifier)) property: (field_identifier)) arguments: (arguments (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments)))))) (if_expression condition: (parenthesized_expression content: (else_expression (call_expression function: (field_expression object: (identifier) property: (field_identifier)) arguments: (arguments)) (block (ERROR (identifier))))) consequence: (block (return_expression) (call_expression function: (field_expression object: (identifier) property: (field_identifier)) arguments: (arguments)))) (return_expression) (string_literal))) (named_function name: (identifier) parameters: (parameters (parameter name: (identifier) type: (primitive_type))) (error_specifier) return_type: (primitive_type) body: (block (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (identifier))) (let_decl (single_var name: (identifier) value: (call_expression function: (identifier) arguments: (arguments)))) (return_expression) (else_expression (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (identifier) (number_literal (integer_literal)))) (block (call_expression function: (identifier) arguments: (arguments (bool_literal))))))) (named_function name: (identifier) parameters: (parameters) body: (block (for_expression (while body: (block (let_decl (single_var name: (identifier) value: (else_expression (call_expression function: (identifier) arguments: (arguments (string_literal (string_content)))) (block (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (string_literal (string_content)))) (continue_statement))))) (let_decl (single_var name: (identifier) value: (else_expression (call_expression function: (identifier) arguments: (arguments (string_literal (string_content)))) (block (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (string_literal (string_content)))) (continue_statement))))) (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (string_literal (string_content) (escape_sequence) (string_content)))) (let_decl (single_var name: (identifier) value: (call_expression function: (identifier) arguments: (arguments)))) (identifier) (identifier) (map_literal (ERROR) (map_entry key: (string_literal (string_content)) (ERROR (binary_expression left: (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (binary_expression left: (identifier) operator: (binary_operator) right: (identifier)))) operator: (binary_operator) right: (string_literal (string_content))) (binary_expression left: (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (binary_expression left: (identifier) operator: (binary_operator) right: (identifier)))) operator: (binary_operator) right: (string_literal (string_content))) (binary_expression left: (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (binary_expression left: (identifier) operator: (binary_operator) right: (identifier)))) operator: (binary_operator) right: (string_literal (string_content)))) value: (binary_expression left: (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (binary_expression left: (identifier) operator: (binary_operator) right: (identifier)))) operator: (binary_operator) (ERROR) right: (call_expression function: (qualified_identifier namespace: (identifier) member: (identifier)) arguments: (arguments (string_literal (string_content)))))))))))))
