(source_file (comment) (import module: (identifier) symbol: (identifier) symbol: (identifier) symbol: (identifier)) (import module: (identifier) symbol: (identifier)) (comment) (function_decl name: (identifier) parameters: (parameter_list parameter: (identifier)) (compound_statement (expression (yield_expression (number))) (comment) (expression (variable_definition (const_list (identifier)) (array))) (comment) (comment) (comment) (comment) (expression (variable_definition (const_list (identifier)) (binary_expression name: (identifier) (multiplicative_operator) (number)))) (expression (invocation (refinement name: (identifier) property: (property_identifier)) arguments: (argument_list name: (identifier)))) (expression (variable_definition (const_list (identifier)) (invocation name: (identifier) arguments: (argument_list name: (identifier))))) (comment) (for_statement (var_list (identifier)) (invocation name: (identifier) arguments: (argument_list (number) name: (identifier) (number))) (compound_statement (expression (variable_definition (const_list (identifier)) (binary_expression name: (identifier) (bitwise_operator) (number)))) (comment) (if_statement (unary_expression (unary_operator) (refinement name: (identifier) name: (identifier))) (compound_statement (expression (yield_expression name: (identifier))) (comment) (comment) (if_statement (binary_expression name: (identifier) (comparison_operator) name: (identifier)) (compound_statement (continue_statement))) (comment) (comment) (comment) (for_statement (var_list (identifier)) (invocation name: (identifier) arguments: (argument_list (binary_expression (binary_expression name: (identifier) (multiplicative_operator) name: (identifier)) (multiplicative_operator) (number)) name: (identifier) name: (identifier))) (compound_statement (expression (assignment (refinement name: (identifier) name: (identifier)) (true))) (comment))))))))) (public_statement (function_decl name: (identifier) (compound_statement (expression (invocation name: (identifier) arguments: (argument_list (string_literal)))) (expression (variable_definition (var_list (identifier)) (number))) (for_statement (var_list variable: (identifier) variable: (identifier)) (invocation name: (identifier) arguments: (argument_list (invocation name: (identifier) arguments: (argument_list (number))))) (compound_statement (expression (invocation name: (identifier) arguments: (argument_list (formatted_string (string_literal_begin) (binary_expression name: (identifier) (additive_operator) (number)) (string_literal_continuation) name: (identifier) (string_literal_end))))) (expression (arithmetic_assignment name: (identifier) (arithmetic_assignment_operator) (number))))) (expression (invocation name: (identifier) arguments: (argument_list (formatted_string (string_literal_begin) name: (identifier) (string_literal_end)))))))))
